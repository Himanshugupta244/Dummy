SARAN S : Completed BTECH 2022, Civil.

Chakkarwarthi M : Manual Tester 

Amrutha : MCA 2020, Manual Tester

Vankata Satya : BTECH 2012, TCS, Manual Testing, Automation Testing

Vidya C : Corporate Trainer from 10 years

Kumaran : BTECH 2014, Freelancing in banking

Roopa Sounthari : MBA 2nd year

Gopi Krishna : Bcome, Senior QA Engineer 6 years.

Shamini : BTECH 2017, Business Analyst

Arun Vignesh : Manual Tester

Vaishnavi : Manual Tester 

MG Deepika : Bsc (CS)

Surya : Manual Tester in Wipro

Rosemary : Manual Tester

S OOviya : Non-IT Professional

Joyson : BTECH 2021, Manual Tester TCS

Priya Darshini - Manual Tester 

=============================================================================================

Date : 24-Jan-2025

A GOOD POINT ABOUT ALL OF YOU IS THAT YOU GUYS ARE FROM SOUTH SIDE OF INDIA AND THE BEST PART IS THAT YOU HAVE A VERY GOOD
COMMUNICATION SKILLS..

EVERY TESTER SHOULD HAVE A GOOD COMMUNICATION SKILLS OTHERWISE HE/SHE CANT SUCCESSED IN IT INDUSTRY TO A LARGER LEVEL.

WHY ?

Basic Example : 

As a developer, he has build a software.
As a tester, he/she has tested it.

But now, it is the time to showcase this software to "CLIENT".

WHO WILL SHOWCASE IT ?

TESTER will showcase it to the client.
And if a tester is not having good communication skills, then that tester needs to struggle a lot.

==============================================================================================

WHAT IS TESTING ?

WE ARE TESTING WHETHER THE PRODUCT IS WORKING AS PER THE REQUIREMENT OR NOT ?

==============================================================================================

WHY TESTING ? / WHAT IS THE NEED OF TESTING ?

IF THE PRODUCT IS HAVING BUGS THEN IT WILL IMPACT THE CUSTOMERS AND CUSTOMER WILL NOT USE OUR PRODUCT.
TESTING IS DONE TO MAKE SURE THAT WE ARE DELIVERING THE QUALITY PRODUCT.

==============================================================================================

WHY TESTER ? (WHY A DEVELOPER CANT TEST AN APPLICATION) ?

A TESTER IS THE ONE WHO THINKS OF THE POSITIVE AND NEGATIVE TEST CASES BUT DEVELOPER SEEM TO BE BIASED AND ONLY THINK ABOUT 
POSITIVE TEST CASES.

==============================================================================================

WHAT ARE TESTING MYTHS : 

1st Testing Myth is : 
100% Testing is possible.

Answer is : No, 100% Testing is not possible.

We can take the best examples like Google, Microsoft and we can clearly say that these big websites (big names) are also having 
bugs. These websites are not 100% bug free.

----------------------------------------------------------------------------------------------

2nd Testing Myth is : 
Testing is very costly.

Answer is : Testing is not costly but it is a cost saving thing.

----------------------------------------------------------------------------------------------

3rd Testing Myth is : 
Testing is very time taking process.

Answer is : Testing is very time saving process.

----------------------------------------------------------------------------------------------

Testing Ways : (How Testing is done) : 

There are 4 ways of doing software testing : 
1) Manual Testing
2) Automation Tesing
3) Database Testing
4) API Testing

==============================================================================================

MANUAL TESTING : 

THERE ARE SO MANY TYPES OF TESTING WE NEED TO LEARN.

Note : In websites, there are so many irrelevant testing types that we dont need to learn,
whatever we are learning in the classes, we need to learn them only.

==============================================================================================

1) Functional Testing

Functional Testing is a type of testing in which we check the functionality of an application/software/product.

Example : In Facebook login page, we check whether we are able to login successfully or not ?

==============================================================================================

2) UI Testing or GUI Testing (Graphical User Interface) : 

UI Testing is a type of testing in which we check that look and feel of an application/software/product.

For example : We check that font size, color, styling, grammatical mistakes etc.

===============================================================================================

3) Positive Testing : 

Positive Testing is a type of testing in which we check the happy path of an application/software/product.

For Example : For Facebook Login Page, we check for valid username and valid password, user should login successfully.

===============================================================================================

4) Negative Testing : 

Negative Testing is a type of testing in which we check all the invalid scenarios of an application/software/product.

For Example : For Facebook Login Page, we check for below test cases : 

correct username and incorrect password
incorrect username and correct password
incorrect username and incorrect password

================================================================================================

5) Black Box Testing : 

- Black Box Testing is a type of testing which is done by tester.
- In black box testing, no coding knowledge is required.
- Functional Testing is a type of Black Box Testing.

===============================================================================================

6) White Box Testing : 

- White Box Testing is a type of testing which is done by developer.
- In White Box Testing, Coding Knowledge is required.
- Unit Testing is a type of White Box Testing.

==============================================================================================

7) Gray Box Testing : 

- Gray Box Testing is a type of testing in which a tester sit with developer to enhance the test cases.
- In Gray Box Testing, Partial Coding Knowledge is required. 

==============================================================================================

8) Module Testing : 

Module Testing is a type of testing in which we individually test the modules of an application/software/product.

==============================================================================================

9) Integration Testing : 

When 2 or more modules are integrated together and we are doing the testing, we call it a integration testing.

==============================================================================================

10) System Testing (End To End Testing) : 

System Testing is a type of testing in which we test the complete system as a whole.

==============================================================================================

11) Smoke Testing : 

- This is a first level of testing.
- Smoke Testing is a type of testing in which we check whether the build is stable enough to do the further testing or not.
- It is a generalized health check up of an application/software/product.

For Example : If we are supposed to test the Facebook application but we are not able to login to facebook, it means
our website is not stable to test it further.

We just whether the application/software/product is stable enough to do the further testing or not ??

===============================================================================================

12) Sanity Testing : 

- Sanity Testing is a type of testing in which we do the specialized health check of an application/software/product.
- Whenever a bug is fixed, we check that all the core functionalities are working fine.

==============================================================================================

13) Regression Testing : 

Regression testing is a type of testing in which we check the impact of code changes in an application/software/product.

Regression Testing comes into the picture in 2 cases : 
1) Whenever there is bug fix, we need to check the impact areas also (not only the bug itself).
2) Whenever there is a new feature that has been introduced in the system/application, we need to check the nearby 
impacted areas.
 
===============================================================================================

14) Compatibilty Testing : 

Compatibilty Testing is a type of testing in which we check the compatibility of our application/software/product on : 

- different browsers
- different screen sizes
- different OS
- different networks etc.

For Example : 
I have a new website say abcd.com, now we need to check this wesbite on : 

- different browsers : Chrome, Safari, Firefox, Edge, OperaMini, Windows Explorer.
- different screen sizes : different mobile sizes, Tablet, Laptops etc.
- different Operating Systems like : Windows, Mac, iOS, Andriod, Linux etc.
- different networks : 2G, 3G, 4G, Mobile Data, Wifi network etc.

==============================================================================================

15) Cross Browser Testing : 

Cross Browser Testing is a type of testing in which we test our application/software/product on different browsers.

Like : Chrome, Safari, Firefox, Edge, OperaMini, Windows Explorer.

Cross Browser Testing is a subset of Compatibilty Testing.

==============================================================================================

Date : 27-Jan-2025

16) Exploratory Testing : 

- Exploratory Testing is a type of testing in which a tester explores the application/software/product.
- This testing is not documented (we never write any test case/scenario).

This type of testing comes in 2 places : 
1) Whenever we join a new organiation.
2) Whenever we got a new project to test.

In this type of testing we explore the application, how is it working and what it is intended for ?

==============================================================================================

17) Monkey Testing : 

- This is a type of testing which is never documented.
- This type of testing is done to break the application/software/product.

Agenda : To check whether all the cases are prefectly handled by the developer ot not ?

==============================================================================================

18) Acceptance Testing/User Acceptance Testing (UAT) : 

- Famous short form is UAT.
- In this type of testing we check whether our application/software/product is acceptable or not ?

There are 2 types of UAT : 
1) Alpha Testing
2) Beta Testing 

Alpha testing is a type of UAT in which the application is tested by internal employee of the organiation.
Beta Testing is a type of UAT in which the application is tested by external users (outside the organiation).

===============================================================================================

19) Performance Testing : 

- Performance Testing is a type of testing in which we check how my application/software/product is performing under load.
-  This is also called non-functional testing.
- We have tools to do performance testing : LoadRunner, JMeter.

There are two types of performance testing.

- Load testing
- Stress Testing

===============================================================================================

20) Load Testing : 

- Load Testing is a type of performance testing in which we increase the load till we achieve the breakpoint.
- We check how my application/software/product works under load.

21) Stress Testing : 

- Stress testing is a type of testing in which we increase more load (after achieving the breakpoint), and we check 
how our application performs after the breakpoint is achieved.

===============================================================================================
===============================================================================================

SDLC (Software Developement Life Cycle)
STLC (Software Testing Life Cycle) 

===============================================================================================

SDLC : It means Software Developement Life Cycle : 

SDLC - we have 6 phases : 
1) Planning
2) Analysis
3) Design
4) Implementation
5) Testing
6) Maintainance 

==============================================================================================

Planning : 

Analysis : 

Design : means creating the framework/architecture of the code.

Implementation means coding

Testing : In this phase, testing is done.

Maintainance : Means any issues that come after live/production, we need to get it fixed.

==============================================================================================

STLC : Software Testign Life Cycle : 

1) Requirement Analysis
2) Test Planning
3) Test Case Design
4) Test Environment SetUp
5) Test Execution
6) Test Closure Activity

1) Requirement Analysis : All the testers are analysing the requirement.
QAs are reading the RSD (requirement specification document).

2) Test Planning

3) Test Case Design : QAs are writing the test cases.

4) Test Environment SetUp : We check whether the test environment are up and running.

Test Environment / Test Servers : Servers in which we do the testing.

5) Test Execution : QAs are executing the test cases and logging bugs.

6) Test Closure activity : In this phase, the QA test and closes the bugs and closes the user story (a small part of project).

==============================================================================================

Levels of testing : 

1) Module Testing 
2) Integration Testing
3) System Testing (End to End Testing)
4) Acceptance Testing 

==============================================================================================

Waterfall Model : (This is very important for interview purpose).

- This model is not used in IT Industry (or very very rarely used).
- In this model, Tesitng is done when the complete development is done.

1) Requirement Analysis
2) Design
3) Development
4) Testing
5) Deployment
6) Maintainance

This model is obselete from the market.
No-one is using this waterfall model.

==============================================================================================

Agile Model : 

Agile Model means we always welcomes the change.
Developement and testing goes hand in hand (parallel).

==============================================================================================

V and V Model : 

Verification and Validation model : 


Check the recorded videos (no notes for this topic - screenshots are shared over email).

==============================================================================================

Test Case and Test Scenario and Test Case Design Template or Test Case Template : 

Check the recorded videos (no notes for this topic - screenshots are shared over email).

Test Scenario and Test Cases is One to Many Mapping, it means one test scenario can have any number of test cases.

==============================================================================================

Topics for Tomorrow : 

QA and QC

Test Case Design Techniques : 

1) Error Guessing
2) Boundary Value Analysis
3) Decision Table
4) State Transition Matrix
5) Equivalence Partitioning.

Priority and Severity

===============================================================================================


28-Jan-25

Revision of below topics : 

V Model - Done
----------------------------------------------------------------------------------------------

Sanity Testing and module testing.

----------------------------------------------------------------------------------------------

Smoke and Sanity

----------------------------------------------------------------------------------------------

Exploratory and Monkey

----------------------------------------------------------------------------------------------

Regression Testing

----------------------------------------------------------------------------------------------

Difference between TC and TS

----------------------------------------------------------------------------------------------

Agile Model

----------------------------------------------------------------------------------------------

Deepikha Assignment

----------------------------------------------------------------------------------------------

Structural Testing

----------------------------------------------------------------------------------------------

Test Bed : 

What is test bed ??

This WORD is very very important for interview.

Preparing the test environments (test server, Test database etc).

----------------------------------------------------------------------------------------------

QA and QC:

QA : Quality Analysis
QC : Quality Control

Check the recorded videos (screenshots are shared over email).

---------------------------------------------------------------------------------------------

Test Case Design Techniques : 

First Technique : 

1) Error Guessing : In this technique an experience tester guide you the important areas of an application which are very critical/important to test.

Check the recorded videos (screenshots are shared over email).

2) Boundary Value Analysis (BVA) : 

Check the recorded videos (screenshots are shared over email).

We check always for 6 values : 

-1 of floor value, floor value, +1 of floor value, -1 of roof value, roof value, +1 of roof value.

20 - 60 : 

19, 20, 21, 59, 60, 61

3) Equivalence Partitioning : 

Check the recorded videos (screenshots are shared over email).

4) Decision Table : 

Check the recorded videos (screenshots are shared over email).

5) State Transition Matrix : 

Check the recorded videos (screenshots are shared over email).

---------------------------------------------------------------------------------------------

Priority And Severity : 

THIS IS VERY VERY VERY VERY VERY VERY VERY IMPORTANT FOR INTERVIEW.
DONT GO FOR INTERVIEW IF YOU HAVE NOT PREPARED THESE 2 TOPICS.


PRIORITY : In which order we need to get a bug fixed.

SEVERITY : What is the functional impact of a bug if I don't get it fixed.  

--------------------------------------------------------------------------------------------

High Priority and Low Severity - A logo of any website is tilted/broken.

High Priority and High Severity - Search functionality is not working in any ecommerce website.

Low Priority and Low Severity - A type error in the footer section of the page.

Low Priority and High Severity : A button which is very very rarely used in an ecommerce website.

Another example : Any link on Terms and Condition is not working so its a high severity but low priority bug.

============================================================================================

AGILE : 

- This AGILE was introduced in 2000.
- JEFF Sutherland is considered as the FATHER of agile.
- 22 People sat together and they made a document named as "AGILE MANIFESTO".
- This agile manifesto says that we need to follow the principles of Project management.

AGILE is used to manage a PROJECT.

When I say project - it means any project.

============================================================================================

12 principles of AGILE.

Agile welcomes the change.

TERM (VERY rare people know about this term) - Empericism (Emperical approach).

===========================================================================================

AGILE IS METHODOLOGY.

- SCRUM IS A FRAMEWORK.
- Safe 
- Spotify model

NOTE : Never say that agile is a framework. Never say that scrum is a model. Never say that scrum is methodology.

===========================================================================================

5 scrum ceremonies : 

1) DSM - Daily Scrum Meeting
2) Backlog Grooming.
3) Sprint Planning.
4) Sprint Review
5) Retrospective Meeting.

===========================================================================================

WHAT ARE SCRUM TEAM MEMBERS (WHAT IS A SCRUM TEAM CONSIST OF) - WHAT IS A SCRUM TEAM ?

- Scrum Master
- Product Owner
- Developers - Developers and Testers.

===========================================================================================

Who is a developer ?

deveoloping the product/ testing the product.

Who is a product owner ?

product owner is the one who gives the requirement to us (devs) from client.

scrum master : 

scrum master is a leader ( this term shows the bossy nature, or rude).
scrum master is a leader who serves ( this term shows that you also serves the organiation). (this is the updated line in scrum guide).


scrum master is the brand ambassador of the team.

===========================================================================================
follow up question:

I (dev) having a doubt in requirement, who will give me requirment clarification (PO or SM)?

one question here also: SM will not understand the requirement?

===========================================================================================

5 scrum ceremonies : 

1) DSM : (Daily Scrum Meeting / Daily StandUp meeting)

what are the 3 agenda of DSM : 

- what I have done yesterday
- what will i do today 
- is there any roadblock / blocker / any major issue.

DSM is always conducted at fix time : 

09:30 Am / 10:00 AM (but it is always at some fixed time).

TEAM SHOULD BE SELF ORGANIZED : 

WHAT WHEN AND HOW ? everyone should know what to do , when to do and how to do ??

-------------------------------------------------------------------------------------------

2) Backlog grooming : 

PO is explaining the requirement to developers.

this takes like 2 hours 
-------------------------------------------------------------------------------------------

sprint : we have to complete set of user stories in a span of 15 days, this 15 days is called sprint.

2 weeks sprint - 15 days.

------------------------------------------------------------------------------------------

3) Sprint Planning : 

we are planning what are the stories that we are going to complete in next 15 days.

------------------------------------------------------------------------------------------

4) Sprint review : 

working piece of software => we need to showcase it to the client.

client can suggest any suggestions etc.

-----------------------------------------------------------------------------------------

5) Sprint Retrospective meeting : 

what are 3 agends of sprint retro : 

1) what went well ?
2) what went wrong ?
3) what are action items that we need to take to improve further.

-----------------------------------------------------------------------------------------

What are the 5 scrum values : 

1) Respect 
2) Courage 
3) Openness
4) Focus
5) commitment

========================================================================================

what are the 3 scrum pillars : 

1) Transparency 
2) Inspection
3) Adaption

========================================================================================

JIRA is a project management tool.

========================================================================================

VERY VERY VERY IMPORTANT QUESTION FOR MANUAL TESTING INTERVIEW : 

What is the different between "Bug Leakage" and "Bug Release" ?

Bug Leakage -> Whenever a tester misses a bug on test environment and the same has been caught by Client/Product owner.

Bug Release -> Whenever we know there is a bug in the system, still we are going live with this bug.

========================================================================================

Bug Drafting (how to draft a bug/ how to log a bug) : 

Whenever we test an application, and we get any bug then we log it and assign this to developer.

We log a bug in JIRA (Project management tool) :

There are 3 things that we need to write whenever we log a bug.

1) Steps to replicate the bug
2) Issue (what is the ssue).
3) Expected Result (what is something that we are expecting to get from the application).

----------------------------------------------------------------------------------------------

Summary : (small, short and crisp).

Project Name : ABCD

Assign : Developer name

[Steps to replicate]
Step1 : 
Step2 : 
Step3 : 


[Issue]
The bug 

[Expected Result]
What is somthing that I am expecting from the application/feature etc.

================================================================================================

There is bug like : Login Button is not working on Login Page.

------------------------------------------------------------------------------------------------

Bug Life Cycle : 

Check the recorded videos (screenshots are shared over email).

------------------------------------------------------------------------------------------------

Requirement Traceability Matrix (This topic is only for interview purpose, no-one uses this matrix) : 

- Short form is very famous and its called RTM.
- This matrix is used to track your test cases with requirment.

Purpose : 

- This matrix make sure that for each requirment, we have atleats one test case.
- Whenever there is a change in the requirment, then we can say that how many test cases are impacted due to this change.

===============================================================================================

What are the important questions for interview purposes : 

1) Waterfall model
2) Difference between sanity testing and smoke testing.
3) Difference between sanity testing and regression testing.
4) Difference between smoke testing and regression testing.
5) What is UAT ?
6) What is the difference between Monkey Testing and Exploratory Testing.
7) What is the difference between verification and validation.
8) Difference between Test Case and Test Scenario.
================================================================================================

05-Feb-2025 : 

How we actual do testing from ZERO TO HERO : 

STEP BY STEP : 

Step1 : 

First of all we have the requirement Doc like BRD : Business Requirement Document. 
In this doc, we have the high level requirement of the project.
We have EPIC where in we can have the brief understanding of the project that we need to develop and test.

Step2 :
We have detailed user stories so that we can have the in depth understanding what we need to build and what we need to test.

Product Owner discusses all the user stories (one by one) with all the developers in a meeting. Meeting is called Backlog Grooming.
Also, we as a tester need to estimate the user stories like it of 2 points, 3 points, 5 points etc etc.
Based on the discussion we come to some conclusion like OKAY IT IS FINALLY OF 5 points.

Step3 : 
In sprint planning we pick the stories what we need to develop and test in a sprint.

Step4 : 
Now the sprint has been started.

Developers will start developing the user stories.

Testers will pick the stories one by one and will start writing the test cases.

Step5 : 
Now when the development of any user story is done, then testers will start picking the user stories one by one and will test them.

Testers will log the bug in JIRA (whatever bugs they are facing).

Developers will side by side fixing the bugs as well as will work on other user stories that are assigned to them in that sprint.

Testers will test the bugs also when the bugs are fixed by developers.

Step6 : Once all the user stories of a sprint are done, we can close the sprint and we are good to start the next sprint.

Note : For the next sprint, we need to have the backlog grooming and sprint planning meeting in the currect sprint itself.

Tools like : Excel, JIRA, Test Rail, Assembla, ALM.

==================================================================================================================

JAVA :

Java is a programming language.

Java was created by James Gosling.

Java was developed in 1995.

Why it is so popular ?

WORA (Write Once, Run Anywhere).

Java works on OOPS concepts (Object Oriented Programming).

4 OOPS Concepts in Java : 
1) Encapsulation
2) Polymorphism
3) Inheritance 
4) Abstraction

WHAT ARE THE 3 IMPORTANT COMPONENTS IN JAVA ECOSYSTEM : 

1) JDK 
2) JRE
3) JVM 

JDK : Java Development Kit (Java Development Tool Kit).

JRE : Java Runtime Environment

JVM : Java Virtual Machine 

Important Question for the interview is :

What is the difference between JDK, JRE, and JVM ?

==================================================================================================================

What is the basic set up that we need to do if we need to learn java, write java or execute java code, debug java code and use java code ?

1) Java SetUp
2) Any IDE like Eclipse/IntelliJ

IDE : Integrated Development Environment

IDE is an application that provides the options/features/tools to write the code, test the code, debug the code, get suggestions in the code, handling the versions of code,
we can check the project hierarchy in this, we can check the files and folder structure in IDE, we can run the code directly, we can add more plugins in IDE etc etc.

==================================================================================================================


It means that IDE(s) are very helpful when we are writing the code.

==================================================================================================================

Download Java : 

1) Download JAVA (from Oracle Website, go to any version lets say 21 and download .exe file).
2) Install Java (execute the .exe file that you have downloaded in the previous step).
3) Open Command Prompt. Press Window -> Type "cmd" and the press enter button.
4) Execute the command in CMD as "java -version".

2 Major Steps that we need to do : 

1) Set the path of "JAVA_HOME" variable :

C:\Program Files\Java\jdk-21.0.4

2) Set the path for "PATH" Variable :

C:\Program Files\Java\jdk-21\bin

Download Eclipse and Install Eclipse : 

Enter Download Eclipse on google and download the eclipse from the first link that you got in google search result.
Install the downloaded eclipse (eclipse that you downloaded in the above step).

===================================================================================================================

Date : 06-Feb-2025

How to create a Java Project : 

1) Open Eclipse.
2) Click File
3) Click New
4) Click Project
5) Select "Java Project".
6) Give any name to this Java Project.
7) Click Finish.

How to create a Java Class : 

1) Right Click on src folder (src folder is there in your project folder).
2) Click new.
3) Click Class.
4) Give any name to this class (make sure to have the class name stating with the capital letter).
5) Select the checkbox "public static void main".
6) click finish.

====================================================================================================================

Java Code always runs (always stars with main method).

It means whenever we are running Java code, it looks for the main method and execute it.

====================================================================================================================

In a class, we have what ??  Methods, Objects and Variables.

Class is a blueprint or a template that is having methods and variable.

Object is an instance of a class. By using an object we can access the methods and variables the class.

===================================================================================================================

How to identify that a particular thing in java is a method.

By checking as if its having the small bracket.

method as main method.

main() 

mwethod name as abc :

abc() 

==================================================================================================================

How to check the scope of a class, scope of a method ?????

By checking its opening curly bracket and closing curly bracket.

=================================================================================================================

How to terminate a line in Java :

By using a semicolon ;

=================================================================================================================

How to print anything in Java :

By using System.out.println("");

=================================================================================================================

How to run a Java Program : 

There are 2 ways to run a Java Program : 

1) Right Click on the class.
2) Click on Run as.
3) Select Java Application.

Another way : 

Just click on Run Button.

=================================================================================================================

First Topic is Operators in Java : 

1) Addition +
2) Subtraction -
3) Multiplication *
4) Division /
5) Modulus Operator

=================================================================================================================

Addition : Doing the summation of numbers.

for numbers we have a data type as int.

Shortcut to print - "System.out.println is Syso -> Ctrl+Space"

Shortcut to delete a line in Eclipse is : Ctrl + d.

package guviNewProject;

public class AdditionOfNumbers {

	public static void main(String[] args) {

		int number1 = 30;
		
		int number2 = 40;
		
		int sum = number1 + number2;
		
		System.out.println("Sum of two numbers is " + sum );
		
	}

}


================================================================================================================

package guviNewProject;

public class AdditionOfNumbers {

	public static void main(String[] args) {

		int number1 = 30;
		
		int number2 = 40;
		
		int number3 = 50;
		
		int sum = number1 + number2 + number3;
		
		System.out.println("Sum of three numbers is " + sum );
		
	}

}


================================================================================================================

Subtraction : Doing the Subtraction of numbers.

package guviNewProject;

public class SubtactionOfTwoNumbers {

	public static void main(String[] args) {
		
		int number1 = 30;
		
		int number2 = 20;
		
		int subtraction = number1 - number2;
		
		System.out.println("Subtraction of two numbers is :: " + subtraction);
		

	}

}


==============================================================================================================

Multiplication : Multiply numbers :

package guviNewProject;

public class MultiplicationOfNumbers {

	public static void main(String[] args) {

		int num1 = 10;
		
		int num2 = 20;
		
		int multiplication = num1 * num2;
		
		System.out.println("multiplication of two numbers is :: " + multiplication);
		
		
	}

}

==============================================================================================================

How to comment in Java : 

One Way : Single Line comment using //

Second Way : Multiple line comment using /* */



package guviNewProject;

public class SubtactionOfTwoNumbers {

	public static void main(String[] args) {
		
		int number1 = 30;  // This is my first number
		
		int number2 = 20; // This is my second number
		
		int subtraction = number1 - number2; // This is the subtraction of two numbers
		  
		System.out.println("Subtraction of two numbers is :: " + subtraction);  // this is to print the subtraction that we did in line number 11
		

	}

}





==============================================================================================================

Division: Divide numbers : 

package guviNewProject;

public class DivisionOfNumbers {

	public static void main(String[] args) {
		
		int firstNumber = 10;
		
		int secondNumber = 2;
		
		int division = firstNumber / secondNumber;
		
		System.out.println("Division of two numbers is :: " + division);

	}

}


===============================================================================================================

Modulus Operator (To check the reminder of 2 numbers) :

Symbol is %

package guviNewProject;

public class ModulusOfTwoNumbers {

	public static void main(String[] args) {
		
		int num1 = 10;
		
		int num2 = 2;
		
		int modulus = num1 % num2;
		
		System.out.println("Modulus of num1 and num2 is :: " + modulus);

	}

}

===============================================================================================================

2 more operators : 

1) single equal =
2) Double Equal ==

first one is to assign the value.
second one is to compare two values.


==============================================================================================================

Keywords in Java  : 

There are specific words that are reserved by Java that we cant use for declarign any variable name or identifier.

- void
- String
- int
- float
- char
- public
- static
- main
- class
- boolean
- byte
- abstract
- break
- continue
- switch
- case
- double
- if
- else
- else if
- this
- super
- do 
- while
- do while
- for
- final
- finally
- extends
- implements
- protected
- private
- default
- long
- package
- short
- return
- throw
- new
- throws
- try
- catch
- super
- import
- enum

==============================================================================================================

Variables and Data Types : 

Data Type : we have data type to define a variable that which type of value it can store.


- Primitive Data Type
- Non Primitive Data Type 

=============================================================================================================

- Primitive Data Type 
- Non Primitive Data Type 
- Variables 
- How many type of variables we have in JAVA.
- Control statements in java.

=============================================================================================================

Create 6 classes : 

1) Hello Worls Class
2) Addition class
3) Subtraction class
4) Multiplication class
5) Division Class
6) modulus class

=============================================================================================================

07-Feb-2025 :

Assignment : 


Assignment : 

Write a program which will first do the summation of 2 numbers 4,5 = 9 and then take a new number 10 and multiply it with summation 
i.e. 9 and result will be 90 and then take a new third number 10 and divide 90 with 10 and the result should be 9 and then 
take a new fourth number 5 and subtract 9 with 5 and then result should be 4.

We need to print the final output that is 4. (Dont print everything).

====================================================================================================================================


You have 15-20 minutes to work on this program.



Program :

package guviNewProject;

public class Assignment1 {

	public static void main(String[] args) {
		
		int num1 = 4;
		int num2 = 5;
		
		int sum = num1 + num2;
		
		int num3 = 10;
		
		int multiply = sum * num3;
		
		int num4 = 10;
		
		int division = multiply/num4;
		
		int num5 = 5;
		
		int subtraction = division - num5;
		
		System.out.println("Final output is :: " + subtraction);

	}

}

====================================================================================================================================

How to run the code in Debug Mode : 

First of all add a breakpoint in a line where you want to pause your code.
(Breakpoint means from where you want to debug your code).

Double click on line number and then a blue round dot will be displayed to you.

Now, run the code in debug mode.

Click on "Step Over" if you want to execute your code line by line without going into the depth of the method.
Click on "Step Into" if you want to go inside the method and want to see the execution.

====================================================================================================================================

Data Types in Java : 

Majorly there are 2 data types :

1) Primitve Data Type
2) Non-Primitive Data Type

Primitive Data Type : 

Primitive data type means a type which is used to save the value in a variable.

There are total 8 primitive data types : 

1) int
2) float
3) double
4) short
5) long
6) boolean
7) char
8) byte 

- short is used to save the small numbers ranging from -32,768 to 32,767 

- int is used to save numbers ranging from -2^31 to 2^31-1 =>    -2,147,483,648 to 2,147,483,647

- long is used to store numbers ranging from -2^63 to 2^63 - 1

- char is used to store the english letters like a-z, A-Z

- boolean is used to store true and false (it means the truthness and the falsification of things/data).

- float is used to store decimal values.

- double is used to store bigger decimal values.


=====================================================================================================================

Non-Primitive data type : 

- Non-primitive data types are used to store (not directly the values) but saving the reference of it.
- Non-primitive data types in java have some predefined methods which we can use directly.

Non-Primitive data types are :
String, Array, List etc. etc.

====================================================================================================================

Wrapper Class : 

For every primitive data type we have a wrapper class : 

int -> Integer
boolean -> Boolean
long -> Long

====================================================================================================================

Variables in Java : 

we have variables in java it means it is thing which is used to store the value and to use it as a reference.

int a = 10;

it means a is variable.

String name = "Himanshu";

name is a variable.

float num = 20.5f;

it means num is a variable.

There are set of rules we need to follow whenever we are using any variable :

1) variable name should start with a letter, underscore (_) or dollar sign ($).

2) No space is allowed in variable name.

3) No keyword can be used as a variable name.

4) variable name is case sensitive.

Rule1 : 

int a = 10;

String name = "Himanshu";

String _myName = "Vaishnavi";

String $learnerName = "Gopi Krishna";

Rule 2 : 

int my number = 10; // This is wrong.

int myNumber = 10; // This is right

Rule 3 : 

int static = 35; // this is wrong because static is a keyword and we cant use keyword as a variable name.

Rule 4 :


int myNumber = 10;

int myNUMBER = 20;


====================================================================================================================

What do we mean by CamelCasing in Java : 

start a variable name / method name with small Letter and then first letter of every next word should be captial.

int myNewNumber = 10;

String myMentorNameInTheClass = "Himanshu";

String firstLearnerNameInGuviBatch = "Hemavathy";

String secondLearnerNameInGuviBatch = "Arun Vignesh";

We need to follow the camelCasing whenever we are giving the name to a variable or a method.

====================================================================================================================

Types of Variable in Java : 

1) Local Variable.
2) Instance Variable.
3) Class Variable.


===================================================================================================================

Local Variable : 

It means it has its local scope only. Once the scope is over then we cant use that local variable.
It is mandatory to initialize a local variable.

public static void method1() {

int num = 10;

}

==================================================================================================================

Instance Variable : 

A variable which is defined outside the method, contructor or any block.

it means to the instance of any class.


==================================================================================================================

Class Variable : 

It is used with the keyword as "static".
The whole class can use this variable.

==================================================================================================================

If Else Conditional Statements : 

String is not a primitive data type.


if(condition) {

------
------

}

else {

----
----

}


Double Equal is used to compare values.

package guviNewProject;

public class IfElseStatements {

	public static void main(String[] args) {
		
		int a = 10;
		
		int b = 20;
		
		if(a==b) {
			System.out.println("a and b are equal");
		}
		
		else {
			System.out.println("a and b are not equal");
		}

	}

}


=========================================================================

package guviNewProject;

public class IfElseStatements {

	public static void main(String[] args) {
		
		int a = 20;
		
		int b = 20;
		
		if(a==b) {
			System.out.println("a and b are equal");
		}
		
		else {
			System.out.println("a and b are not equal");
		}

	}

}



=========================================================================

if (condition){
---
}

else if (condition) {
----
}

else {
----
}

package guviNewProject;

public class IfElseStatements {

	public static void main(String[] args) {
		
		int a = 10;
		
		int b = 20;
		
		if(a>b) {
			System.out.println("a is greater than b");
		}
		
		else if (b > a) {
			System.out.println("b is greater than a");
		}
		
		else {
			System.out.println("a and b are equal");
		}
		
	}

}


It is not mandatory to use "else" with "if".

If we need to check some condition in else also, then we will be using "else if" in place of "else".

===============================================================================================================

Switch Case : 

int day;

switch(day) {

case 1:
SOP("Monday");

case 2 :
SOP("Tuesday");

case 3 :
SOP("Wednesday");

default:
SOP("I dont know what is the day today");

}

What is the use of Default : 

If there is no condition which is matching with the case, then it will by default go in "Default condition".

===============================================================================================================


package guviNewProject;

public class SwitchStatementsUnderstanding {

	public static void main(String[] args) {

		int day = 4;

		switch(day) {

		case 1 :
			System.out.println("Monday");
			break;
		case 2 :
			System.out.println("Tuesday");
			break;
		case 3 :
			System.out.println("Wednesday");
			break;
		case 4 :
			System.out.println("Thursday");
			break;
		case 5 :
			System.out.println("Friday");
			break;
		case 6 :
			System.out.println("Saturday");
			break;
		case 7 :
			System.out.println("Sunday");
			break;
		default :
			System.out.println("I am not sure what is the day today");
			break;
		}
	}
}


package guviNewProject;

public class SwitchStatementsUnderstanding {

	public static void main(String[] args) {

		int day = 80000;

		switch(day) {

		case 1 :
			System.out.println("Monday");
			break;
		case 2 :
			System.out.println("Tuesday");
			break;
		case 3 :
			System.out.println("Wednesday");
			break;
		case 4 :
			System.out.println("Thursday");
			break;
		case 5 :
			System.out.println("Friday");
			break;
		case 6 :
			System.out.println("Saturday");
			break;
		case 7 :
			System.out.println("Sunday");
			break;
		default :
			System.out.println("I am not sure what is the day today");
			break;
		}
	}
}


===============================================================================================================


Looping.
Arrays.
Access modifiers.
Strings Class.
Constructor,Methods,
Class & Object Creation
Use of Static and Instance
All 4 OOPS Concepts.

===============================================================================================================

Looping : 


What is a loop in Java : 

Loops are in java are used to execute some certain code multiple times on the basis of some condition.

For Example : 
I need to print System.out.println("Himanshu is the mentor"); -- 25 times
I need to print System.out.println("Gopi Krishna is the learner"); -- 15 times

package guviNewProject;

public class ForLoopUnderstanding {

	public static void main(String[] args) {
		
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		System.out.println("Himanshu is the mentor");
		
		
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");
		System.out.println("Gopi Krishna is the learner");

	}

}


1) For Loop
2) While Loop
3) Do While Loop

===============================================================================================================

For Loop : 

Syntax : 

for(initialization, condition, increment/decrement) {

}


initialization : Initialize a variable with some value.
condition : till where the loop will be executed.
increment/decrement : increase or decrease the value of variable (used in initialization).

Note : Never use variable names like i, j, k ===============  Why ?

Answer: It shows that :

1) these variable names are not meaningfull.
2) these variables names shows that you are a fresher and is new to Java (Coding).


package guviNewProject;


// Question : I need to Deepika 10 times

public class ForLoopUnderstanding {

	public static void main(String[] args) {
		printName();
		}
	
	public static void printName() {
		
		for(int index=0;index<10;index++) {           // 0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			System.out.println("Deepika");
		}
		
	}

}


-----------------------------------------------------------------------------------------------------------


package guviNewProject;


// Question : I need to Deepika 10 times

public class ForLoopUnderstanding {

	public static void main(String[] args) {
		printName();
		}
	
	public static void printName() {
		
		for(int index=1;index<10;index++) {           // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
			System.out.println("Deepika");
		}
		
	}

}



---------------------------------------------------------------------------------------------------------------

package guviNewProject;


// Question : I need to Deepika 10 times

public class ForLoopUnderstanding {

	public static void main(String[] args) {
		printName();
		}
	
	public static void printName() {
		
		for(int index=1;index<=10;index++) {           // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
			System.out.println("Deepika");
		}
		
	}

}


Nested for loop :

package guviNewProject;

// Question : I need to Deepika 10 times

public class ForLoopUnderstanding {

	public static void main(String[] args) {
		printName();
		}
	
	public static void printName() {
		
		for(int index=1;index<=10;index++) {           // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
			System.out.println("Deepika");
		
			for(int count=1;count<=5;count++) {
				System.out.println("Himanshu");
			}
			
		}
		
	}

}


===============================================================================================================

package guviNewProject;

// Question : I need to Deepika 10 times

public class ForLoopUnderstanding {

	public static void main(String[] args) {
		printName();
		}
	
	public static void printName() {
		
		for(int index=1;index<=10;index++) {           // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
			System.out.println("Deepika");
		}
		
		for(int count=1;count<=5;count++) {
			System.out.println("Himanshu");
		}
		
	}

}

===============================================================================================================

package guviNewProject;

// Question : I need to Deepika 10 times

public class ForLoopUnderstanding {

	public static void main(String[] args) {
		printName();
		}
	
	public static void printName() {
		
		for(int index=1;index<=10;index++) {           // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
			System.out.println("Deepika");
			for(int count=1;count<=10;count++) {
				System.out.println("Himanshu");
			for(int value=1;value<=2;value++) {
				System.out.println("Arun Vignesh");
			}
			}
		}
		
	
		
	}

}


===============================================================================================================

While : 

While(condition)  {

variable++;
} 


package guviNewProject;

public class WhileLoopUnderstanding {

	public static void main(String[] args) {

		int a = 1;
		
		while(a<=10) {
			System.out.println("Surya");
			a = a+1;
		}
		
	}

}




package guviNewProject;

public class WhileLoopUnderstanding {

	public static void main(String[] args) {

		int a = 1;
		
		while(a<=10) {
			System.out.println("value of a is :: " + a);
			System.out.println("Surya");
			a = a+1;
		}
		
	}

}



===============================================================================================================

do-while loop : 

do {

code 

} while (condition)

Difference between while and do-while loop : 


while loop executes on the basis of condition

but do while loop always executes atleast once and then checkes the condition.


package guviNewProject;

public class DoWhileLoopUnderstanding {

	public static void main(String[] args) {
		
		int a = 5;
		
		do {
			
			System.out.println("Rosemarry");
			a = a + 1;
		}  while (a < 10) ;  
	
		
	}

}


WAP to Print something 10 times using for loop.
WAP to Print something 10 times using while loop.
WAP to Print something 10 times using do-while loop.


===============================================================================================================

Access Modifiers :

Access Modifier is what ?

Modifiers are used in Java to give the access to the members of a class to a certain level.

1) public
2) private
3) protected
4) default

public means : 

1) Same Class - yes
2) Same Package - yes
3) Subclass of different package - yes
4) All classes - yes

private means : 

1) same class - yes
2) same package - No
3) subclass of different package - No
4) All classes - No

protected means : 

1) same class - yes
2) same package - yes
3) subclass of different package - yes
4) All classes - No

default (whever we are not using any public, private or protected keyword, it means that is using default modifier automatically).

1) same class - yes
2) same package - yes
3) subclass of different package - No
4) All classes - No

===============================================================================================================

Array : 

Whenever we need to store more than 1 value of same data type, in that we use Arrays.

Syntax : 

Leys say i need to store 10 values of same data type as Integer.

int[] arrayName = new int[lengthOfArray];

Advantage of Using Array : 
It can store values of same data type.

Disadvange : 
Array is fixed in length and the length of an array can be a waste when it is not utilized.

Important Point in Java is : 

Indexing always starts with Zero (not 1).


10,20,30,40,50,60,70,80,90,100

0,1,2,3,4,5,6,7,8,9

How to find the length of an array : 

using length property of Array.

array.lenth;

by default the value of int variable is 0.
by default the value of String variable is null.
by default the value of boolean variable is false.

IMPORTANT Interview Question :

When we get "ArrayIndexOutOfBoundException" ?


package guviNewProject;

public class ArrayUnderstanding {

	public static void main(String[] args) {
		
//		int[] arrayName = new int[lengthOfArray];
		
		int[] myArray = new int[5];
		
		myArray[0] = 10;
		myArray[1] = 20;
		
		int length = myArray.length;
	
		for(int count=0;count<=length;count++) {  // 0
			System.out.println("value at " + count + " is " + myArray[count]);
		}
		

	}

}



package guviNewProject;

public class ArrayUnderstanding {

	public static void main(String[] args) {
		
//		int[] arrayName = new int[lengthOfArray];
		
		int[] myArray = new int[5];
		
		myArray[0] = 10;
		myArray[1] = 20;
		
		int length = myArray.length;
	
		for(int count=0;count<=length-1;count++) {  // 0
			System.out.println("value at " + count + " is " + myArray[count]);
		}
		

	}

}


package guviNewProject;

public class ArrayUnderstanding {

	public static void main(String[] args) {
		
//		int[] arrayName = new int[lengthOfArray];
		
		int[] myArray = new int[5];
		
		myArray[0] = 10;
		myArray[1] = 20;
		
		int length = myArray.length;
	
		for(int count=0;count<length;count++) {  // 0
			System.out.println("value at " + count + " is " + myArray[count]);
		}
		

	}

}


Another way to declare an array : 

package guviNewProject;

public class ArrayUnderstanding {

	public static void main(String[] args) {
		
//		int[] arrayName = new int[lengthOfArray];
		
		int[] myArray = {2,3,4,5}; // 2 things are happening here -> A fixed array length of 4 is created. Values are assigned to all the positions.
		
		int myArrayLength = myArray.length;
		
		for(int count=0;count<myArrayLength;count++) {
			System.out.println(myArray[count]);
		}
		
		

	}

}


package guviNewProject;

public class ArrayUnderstanding {

	public static void main(String[] args) {
		
//		int[] arrayName = new int[lengthOfArray];
		
		String[] myStrArray = {"Himanshu", "Gopi Krishna"};
		
		System.out.println(myStrArray[0]);
		
		System.out.println(myStrArray[1]);

	}

}




===============================================================================================================

Take two numbers from user and then swap the numbers (using 3rd variable) and then print the swapped numbers.


package guviNewProject;

import java.util.Scanner;

public class ScannerClassForTakingInputFromUser {

	public static void main(String[] args) {

		Scanner scanner = new Scanner(System.in);
		
		System.out.println("Enter first number : ");
		int a = scanner.nextInt();
		
		System.out.println("Enter second number : ");
		int b = scanner.nextInt();
		
		int temp;
		
		temp = a;
		a = b;
		b = temp;
		
		System.out.println("first number after swapping is :: " + a);
		System.out.println("second number after swapping is :: " + b);
		
		
	}

}

===============================================================================================================

11-Jan-2025

Small Assignment : 

Array : 

Program 1 : WAP to create a new array of size 10 and print this in reverse order.

package guviNewProject;

public class ArrayProgramAssignment1 {

	public static void main(String[] args) {

		int[] myArray1 = new int[10];
		myArray1[0] = 10;
		myArray1[1] = 20;
		myArray1[2] = 30;
		myArray1[3] = 40;
		myArray1[4] = 50;
		myArray1[5] = 60;
		myArray1[6] = 70;
		myArray1[7] = 80;
		myArray1[8] = 90;
		myArray1[9] = 100;


		for(int count=myArray1.length-1;count>=0;count-- ) {  
			System.out.println(myArray1[count]);
		}
	}

}


========================================================================================================

package guviNewProject;

public class ArrayProgramAssignment1 {

	public static void main(String[] args) {

		int[] myArray1 = {10,20,30,40,50,60,70,80,90,100};

		for(int count=myArray1.length-1;count>=0;count-- ) {  
			System.out.println(myArray1[count]);
		}
	}

}

========================================================================================================


Program 2 : WAP to create a new array of size 5 and copy all its values into a new array.


package guviNewProject;

public class HowToCopyElementsInArray {

	public static void main(String[] args) {
		
		int[] OriginalArray = {1,25,100,500,85,95,4125,3025,2,74};
		
		int[] newArray = new int[OriginalArray.length];  
		
		for(int count=0;count<OriginalArray.length;count++) {  
			newArray[count] = OriginalArray[count];
		}
		
		for(int index=0;index<newArray.length;index++) {
			System.out.println(newArray[index]);
		}

	}

}


===============================================================================================================

How to create an Object ?
What is an object ?

Object is used to access the data members (variables, methods) of same class, different class.

SIMPLEST WAY TO CREATE AN OBJECT IS USING NEW KEYWORD. Whenver you need to create the object of a class, just follow the below syntax :

new className();

package guviNewProject;

public class CorrectUnderstandingOfObject {

	public static void main(String[] args) {
		new CorrectUnderstandingOfObject().myMethod1();
		new CorrectUnderstandingOfObject().myMethod2();
	}
	
	public void myMethod1() {
		System.out.println("I am method 1");
	}
	
	public void myMethod2() {
		System.out.println("I am method 2");
	}

}




package guviNewProject;

public class CorrectUnderstandingOfObject {

	public static void main(String[] args) {
		CorrectUnderstandingOfObject myObject =  new CorrectUnderstandingOfObject();
		myObject.myMethod1();
		myObject.myMethod2();
		myObject.myMethod3();
		
	}
	
	public void myMethod1() {
		System.out.println("I am method 1");
	}
	
	public void myMethod2() {
		System.out.println("I am method 2");
	}
	
	public void myMethod3() {
		System.out.println("I am method 3");
	}

}


package guviNewProject;

public class CorrectUnderstandingOfObject {

	public static void main(String[] args) {
		
		DummyClass2 myNewObject =  new DummyClass2();
		myNewObject.randomMethod();
		
	}
	
	public void myMethod1() {
		System.out.println("I am method 1");
	}
	
	public void myMethod2() {
		System.out.println("I am method 2");
	}
	
	public void myMethod3() {
		System.out.println("I am method 3");
	}

}


package guviNewProject;

public class DummyClass2 {

	public static void main(String[] args) {

	}

	public static void randomMethod() {
		System.out.println("I am a random method");
	}
	
}





package guviNewProject;

public class CorrectUnderstandingOfObject {

	public static void main(String[] args) {
		method1();
	}
	
	public static void method1() {
		DummyClass2 myNewObject =  new DummyClass2();
		myNewObject.randomMethod();
	}
	

}



==============================================================================================================




OOPS Concepts in Java : 

1) Polymorphism
2) Inheritance
3) Abstraction
4) Encapsulation

==============================================================================================================

Inheritance is done by using extends keyword : 

Multiple Inheritance is not allowed in Java.

Multiple Level Inheritance is allowed in Java.

Interview Question: How can we achieve multiple inheritance in Java ?
Answer is : Using Interfaces.

Program for Inheritance: 

package guviNewProject;

public class ClassA extends ClassB{
	
	public static void main(String[] args) {
		m1();
		method1();
	}

}


package guviNewProject;

public class ClassB extends ClassC{
	
	public static void main(String[] args) {
		method1();
	}
	
	public static void m1() {
		System.out.println("I am m1 method of class B");
	}
	
	public void m2() {
		System.out.println("I am m2 method of class B");
	}

}


package guviNewProject;

public class ClassC {
	
	public static void method1() {
		System.out.println("I am method1 of ClassC");
	}

}


ClassA is the grandChild.
ClassB is the parent.
ClassC is the grandParent.

==============================================================================================================

Polymorphism :

Poly means many.
phism - forms.

So, Polymorphism means many forms.

There are 2 types of polymorphism : 

1) Overloading.
2) Overridding.

Overloading means overloading of methods in same class.

Before we understand overloading, we need to understand what is method parametarization. 

package guviNewProject;

public class ParameterizationInMethods {

	public static void main(String[] args) {
		detailsOfGuviEveningBatch("Himanshu", "Roopa",17);
		detailsOfGuviEveningBatch("Himanshu", "Gopi",15);
	}
	
	public static void sum(int a, int b) {
		int num1 = a;
		int num2 = b;
		int sum = num1 + num2;
		
		System.out.println("sum of 2 numbers is :: " + sum);
	}
	
	public static void detailsOfGuviEveningBatch(String mentorName, String learnerName, int numberOfStudents) {
		
		String name1 = mentorName;
		String name2 = learnerName;
		
		System.out.println("Mentor name is " + name1 + " and Learner name is " + name2);
		System.out.println("There are total of " +numberOfStudents + " students" );
		
	}

}


Overloading Concept :

There are 3 ways of Overloading

In same class, 
1) Create methods with same name but with different number of parameters.
2) Create methods with same name but with different type of parameters.
3) Create methods with same name same no of parameters, same type of parameters but take different order of parameters.


1) Create more than 1 method with same name but with different number of parameters :

package guviNewProject;

public class OverloadingUnderstanding {

	public static void main(String[] args) {

		sum(10,10);
		sum(20, 40, 10);
	}
	
	public static void sum(int a, int b) {
		int sum = a + b;
		System.out.println("sum of 2 number is :: " + sum);
	}
	
	public static void sum(int a, int b, int c) {
		int sum = a + b + c;
		System.out.println("sum of 3 number is :: " + sum);
	}
	

}


2) Create more than 1 method with same name but with different type of parameters :

package guviNewProject;

public class OverloadingUnderstanding2 {
	
	public static void main(String[] args) {
		
		guviBatchDetails(17, "Himanshu");
		guviBatchDetails(17, 1);
	}
	
	public static void guviBatchDetails(int totalNumberOfStudents, String mentorName) {
		System.out.println("totalNumberOfStudents in guvi batch is :: " + totalNumberOfStudents + " and " + " mentor name is " + mentorName);
	}
	
	public static void guviBatchDetails(int totalNumberOfStudents, int mentorCount ) {
		System.out.println("totalNumberOfStudents in guvi batch is :: " + totalNumberOfStudents + " and mentor count is " + mentorCount );
	}

}



package guviNewProject;

public class OverloadingUnderstanding2 {
	
	public static void main(String[] args) {
		
		guviBatchDetails(17, "Himanshu");
		guviBatchDetails(17, 1);
	}
	
	public static void guviBatchDetails(int a, String b) {
		System.out.println("totalNumberOfStudents in guvi batch is :: " + a + " and " + " mentor name is " + b);
	}
	
	public static void guviBatchDetails(int a, int b ) {
		System.out.println("totalNumberOfStudents in guvi batch is :: " + a + " and mentor count is " + b );
	}

}


3) Create more than 1 method with same name same no of parameters, same type of parameters but take different order of parameters.

package guviNewProject;

public class OverloadingUnderstanding3 {

	public static void main(String[] args) {
		guviBatchDetails("Himanshu",17);
	}
	
	public static void guviBatchDetails (int numberOfStudents, String mentorName) {
		System.out.println("Total number of students in guvi batch is " + numberOfStudents);
		System.out.println("Mentor name is :: " + mentorName);
	}
	
public static void guviBatchDetails (String mentorName, int numberOfStudents) {
	System.out.println("Mentor name is :: " + mentorName);
	System.out.println("Total number of students in guvi batch is " + numberOfStudents);
	}
	
	

}


=============================================================================================================

package guviNewProject;

public class OverloadingUnderstanding3 {

	public static void main(String[] args) {
		guviBatchDetails("Himanshu",17);
	}
	
	public static void guviBatchDetails (int a, String b) {
		System.out.println("Total number of students in guvi batch is " + a);
		System.out.println("Mentor name is :: " + b);
	}
	
public static void guviBatchDetails (String a, int b) {
	System.out.println("Mentor name is :: " + a);
	System.out.println("Total number of students in guvi batch is " + b);
	}
	
	

}


=============================================================================================================

package guviNewProject;

public class OverloadingUnderstanding3 {

	public static void main(String[] args) {
		guviBatchDetails("Himanshu",17);
	}
	
	public static void guviBatchDetails (int a, String b) {
		System.out.println("Total number of students in guvi batch is " + a);
		System.out.println("Mentor name is :: " + b);
	}
	
public static void guviBatchDetails (String c, int d) {
	System.out.println("Mentor name is :: " + c);
	System.out.println("Total number of students in guvi batch is " + d);
	}
	
	

}

=============================================================================================================

Program 1 : 
Create a class having 3 methods with same name but :
1) one method having 2 parameters int int
2) one method having 2 parameters string int
3) one method having 2 parameters int string 
and call all these methods with main method.


package guviNewProject;

public class Assignment_12Feb {

	public static void main(String[] args) {

		m1(1,2);
		m1("Himanshu",1);
		m1(1, "Roopa");
	}
	
	public static void m1(int a, int b) {
		System.out.println("I am m1 method of int int");
	}
	
	public static void m1(String a, int b) {
		System.out.println("I am m1 method of string int");
	}
	
	public static void m1(int a, String b) {
		System.out.println("I am m1 method of int string");
	}

}


Program 2 : 
Create a class A1 that will be extending classB1 and this ClassB1 is extending ClassC, create a method in ClassC1 and call this method 
in ClassA without creating an object.

package guviNewProject;

public class ClassA1 extends ClassB1{
	
	public static void main(String[] args) {
		m1();
	}

}


package guviNewProject;

public class ClassB1 extends ClassC1{


}



package guviNewProject;

public class ClassC1 {
	
	public static void m1() {
		System.out.println("I am m1 method of ClassC1");
	}

}

================================================================================================================

Overridding in Java : 

Another name for overridding is Run Time Polymorphism.
Another name for overridding is Dynamic Method Dispatch.

What is overrdding ?

In Overrdding, we can create the same method in child class and same method in parent class (same method along with same parameters) 
but at run time we are deciding which method we need to call.

package guviNewProject;

public class ChildClass extends ParentClass{

	public static void main(String[] args) {

		ParentClass myObj1 = new ParentClass(); // This is correct
		myObj1.m1();
				
		ChildClass myObj2 = new ChildClass(); // This is correct
		myObj2.m1();
		
		ParentClass myObj3 = new ChildClass(); // This is correct
		myObj3.m1();
		myObj3 = new ParentClass();
		myObj3.m1();
		
//		ChildClass myObj4 = new ParentClass(); // This is incorrect
		
	}
	
	public void m1() {
		System.out.println("I am m1 method of Child Class");
	}

}


================================================================================================================

Constructor : 

Constructor is nothing but a method only. But there are some conditions of a contructor :

1) It is having the exact same name as the class name. If the class name is calculator then constructor name will be calculator.
2) It never return anything.
3) Whenener the object of its class is created, constructor is called automatically.
4) Constructor can be overloaded exactly like method overloading.


return statement use : 

package guviNewProject;

public class ReturnUnderstanding {

	public static void main(String[] args) {
		int summation = sum(12, 2);
	}
	
	public static int sum(int a, int b) {
		int sum = a + b;
		return sum;
	}

}



package guviNewProject;

public class ReturnUnderstanding {

	public static void main(String[] args) {
		System.out.println("sum of 2 numbers is :: " + sum(12, 3));
	}
	
	public static int sum(int a, int b) {
		int sum = a + b;
		return sum;
	}

}



package guviNewProject;

public class ReturnUnderstanding {

	public static void main(String[] args) {
		String mentorName = guviMentorName();
		System.out.println("metor name for guvi evening batch is :: " + mentorName);
	}
	
	public static int sum(int a, int b) {
		int sum = a + b;
		return sum;
	}
	
	public static String guviMentorName() {
		String name = "Himanshu";
		return name;
	}

}


-------------------------------------------------------------------------------------------------------------------

Contructor is of 2 types : 
1) Default Constructor 
2) Parameterized Constructor 

Default Constructor means which does not have any arguments/parameters.
Parameterized constructor means which is having at-least one arguments/parameters.

package guviNewProject;

public class ConstructorUnderstanding {
	
	public ConstructorUnderstanding() {
		System.out.println("I am the default constructor");
	}
	
	public ConstructorUnderstanding(int a) {
		System.out.println("value of a is :: " + a);
		System.out.println("I am the constructor");
	}
	
	public static void main(String[] args) {
		new ConstructorUnderstanding(10);
	}

}



package guviNewProject;

public class ConstructorUnderstanding {
	
	public ConstructorUnderstanding() {
		System.out.println("I am the default constructor");
	}
	
	public ConstructorUnderstanding(int a) {
		System.out.println("value of a is :: " + a);
		System.out.println("I am the constructor with one parameter");
	}
	
	public ConstructorUnderstanding(int a, String b) {
		System.out.println("Total number of students in class is :: " + a);
		System.out.println("Mentor name is " + b);
		System.out.println("I am the constructor with two parameters");
	}
	
	public static void main(String[] args) {
		new ConstructorUnderstanding(20,"Himanshu");

	}

}



package guviNewProject;

public class ConstructorUnderstanding {
	
	public ConstructorUnderstanding() {
		System.out.println("I am the default constructor");
	}
	
	public ConstructorUnderstanding(int a) {
		System.out.println("value of a is :: " + a);
		System.out.println("I am the constructor with one parameter");
	}
	
	public ConstructorUnderstanding(int a, String b) {
		System.out.println("Total number of students in class is :: " + a);
		System.out.println("Mentor name is " + b);
		System.out.println("I am the constructor with two parameters");
	}
	
	public static void main(String[] args) {
		new ConstructorUnderstanding();
		new ConstructorUnderstanding(20);
		new ConstructorUnderstanding(20,"Himanshu");
	}

}

=============================================================================================================

What is the use of Constructor when it is working exactly like method : 

Constructor is used whenever we need to perform any of the below actions : 
1) Opening the browser.
2) Opening the excel file.
3) Creating the database connection.

=============================================================================================================

this and super - these are the separate keywords used in Java.

this is used to refer the instance of current class data members.
super is used to refer the data members of its parent class.

=============================================================================================================

package guviNewProject;

public class ChildClass1 extends ParentClass1 {
	
	public ChildClass1() {
		System.out.println("I am the constructor of ChildClass1");
	}
	
	
	public static void main(String[] args) {
		new ChildClass1();
	}

}


package guviNewProject;

public class ParentClass1 {
	
	public ParentClass1() {
		System.out.println("I am the constructor of ParentClass1");
	}

}


===============================================================================================================

Encapsulation : 

Encapsulation is one of the 4 OOPS concepts of java.
It is a process of hiding the data (variables) inside a class and allowing the access to them only by using getter and setter methods.


package guviNewProject;

public class Person {
	
	private String name;
	
	public void SetName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
}



package guviNewProject;

public class EncapsulationUnderstanding {

	public static void main(String[] args) {
		
		Person myObject =  new Person();
		
		myObject.SetName("Arun");
		String valueOfName = myObject.getName();
		System.out.println("name is :: " + valueOfName);
	}

}



package guviNewProject;

public class Person {
	
	private String name;
	private int age;
	
	public void SetName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		if(age>0) {
			this.age = age;
		}
		else {
			this.age = age;
			System.out.println("Age is invalid");
		}
	}
	
	public int getAge() {
		return age;
	}
	
}



package guviNewProject;

public class EncapsulationUnderstanding {

	public static void main(String[] args) {
		
		Person myObject =  new Person();
		
		myObject.SetName("Arun");
		String valueOfName = myObject.getName();
		System.out.println("name is :: " + valueOfName);
		
		myObject.setAge(20);
		int ageOfFirstOPerson = myObject.getAge();
		System.out.println("age is :: " + ageOfFirstOPerson);
		
		myObject.setAge(-2);
		int ageOfSecondPerson = myObject.getAge();
		if(ageOfSecondPerson>0) {
		System.out.println("age is :: " + ageOfSecondPerson);
		}
		
		
	}
	
	

}

==========================================================================================================

Revision of Encapsulation : 

- One of the OOPS Concepts of Java.
- If we have 2000 line of code, we use encapsulation concept in hardly 10-20 lines, which means this concept is used very rarely.
- In Encapsulation, we are hiding the implementtion of methods from the outside user and the outside user cant access the variables directly.
which means an outside person cant touch/access the variable directly.
which means an outside person cant change the value of a private member of a class directly.
- Outside member need to take the help of getters and setters method.
- There is no rule of defining a getters and setters name, it means there is no special nomenclature for getters and setters.
- Java never provide any getters and setters method.
- We as a developer needs to write these getters and setters by ourselves and this can be written in some sensable names like : 

If we have "name" as a private variable, we can have the getter and setter name as : 

setName();
getName();

If we have "numberOfStudents" as a private variable, we can have the getter and setter name as : 

setNumberOfStudents();
getNumberOfStudents();

If we have "organisationLocation" as a private variable, we can have the getter and setter name as : 

setOrganisationLocation();
getOrganisationLocation();

In short, we can simply write to methods in a class to set the variable value and to get the variable value after its changed.


package guviNewProject;

public class GuviBatchDetails {
	
	private String mentorName;
	private int numberOfStudents;
	private String batchCordinatorName;
	
	public void setMentorName(String mentorName) {
		this.mentorName = mentorName;
	}
	
	public void getMentorName() {
//		String finalMentorName = this.mentorName.toUpperCase();
		System.out.println("Mentor name is :: " + this.mentorName.toUpperCase());
	}
	
	public void setNumberOfStudents(int noOfStudents) {
		this.numberOfStudents=noOfStudents; 
	}
	
	public int getNumberOfStudents() {
		return this.numberOfStudents;
	}
	
	public void setBatchCordinatorName(String studentCordinatorName) {
		this.batchCordinatorName = studentCordinatorName;
	}
	
	public String getBatchCordinatorName() {
		return this.batchCordinatorName;
	}
	
}



package guviNewProject;

public class GuviWeeklyBatch6To9PM {

	public static void main(String[] args) {
		
		GuviBatchDetails myObject =  new GuviBatchDetails();
		
		myObject.setMentorName("Himanshu");
		myObject.getMentorName();
		
		myObject.setNumberOfStudents(14);
		System.out.println("Number of students in this batch is :: " + myObject.getNumberOfStudents());
		
		myObject.setBatchCordinatorName("Fadil");
		System.out.println("Student Cordinator name for this batch is :: " + myObject.getBatchCordinatorName());

	}

}



==========================================================================================================

- String is class in Java.
- String is immutable in java because its value cant be destroyed/changeable.
- String fall under non-primitive data type.

What is immutable ?

its value cant be destroyed/changeable.

double equal to means we are comparing the address of String variables.
equals means we are not comparing the address but we are comparing the value of Strings.

package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String name1 = "Hemavathy";
		String name2 = "Hemavathy";
		String name3 = new String("Hemavathy");
		
		if(name1==name2) {
			System.out.println("name1 and name2 are equal");
		}
		
		if(name1.equalsIgnoreCase(name2)) {
			System.out.println("name1 and name2 are equal");
		}
		
		if(name1==name3) {
			System.out.println("name1 and name3 are equal");
		}
		else {
			System.out.println("name1 and name3 are not equal");
		}
		
		if(name1.equalsIgnoreCase(name3) ) {
			System.out.println("name1 and name3 are equal");
		}
		else {
			System.out.println("name1 and name3 are not equal");
		}
		
	}

}


Output is :
name1 and name2 are equal
name1 and name2 are equal
name1 and name3 are not equal
name1 and name3 are equal

==========================================================================================================

String Concatination : 

we use + symbol to concatinate the strings.

package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String firstName = "Himanshu";
		String lastName = "Gupta";
		
		String fullName = firstName + lastName;
		
		System.out.println("full name is :: " + fullName);
		
		
	}

}


========================================================================================================

package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String firstName = "Himanshu";
		String spaceValue = "  ";
		String lastName = "Gupta";
		
		String fullName = firstName + spaceValue + lastName;
		
		System.out.println("full name is :: " + fullName);
		
		
	}

}

========================================================================================================

package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String firstName = "Himanshu";
		String lastName = "Gupta";
		
		String fullName = firstName + "  " + lastName;
		
		System.out.println("full name is :: " + fullName);
		
		
	}

}

========================================================================================================

methods we have in String : 

toLowerCase and toUpperCase: 

package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String firstName = "Himanshu";
		String lastName = "Gupta";
		
		String fullName = firstName + " " + lastName;
		
		System.out.println("full name is :: " + fullName);
		
		// Print full name in small letters : 
		System.out.println(fullName.toLowerCase());
		
		// Print full name in uppercase letters : 
		System.out.println(fullName.toUpperCase());
		
		
		
	}

}

========================================================================================================

split in String : 

Split with space : 

Himanshu Gupta	arr[0]	Himanshu
	            arr[1]	Gupta
		
		
Latha Singh Varshnay	arr[0]	Latha
	                    arr[1]	Singh
	                    arr[2]	Varshnay
						
						

package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String fullName = "Himanshu Gupta";
		getFirstName(fullName);
		getLastName(fullName);
		
	}
	
	public static void getFirstName(String name) {
		String[] names =   name.split(" ");
		String firstName = names[0];
		System.out.println("Firstname is :: " + firstName);
	}
	
	public static void getLastName(String name) {
		String[] names =   name.split(" ");
		String lastName = names[1];
		System.out.println("LastName is :: " + lastName);
	}

}

========================================================================================================


package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String mentorName = "Himanshu Gupta";
		String learnerName = "Joyson";
		
		// What is the first letter of mentor name
		// What is first letter of learnerName
		
		System.out.println("first letter of mentorName is :: " + mentorName.charAt(0));
		System.out.println("first letter of learnerName is :: " + learnerName.charAt(0));
		System.out.println("number of characters in mentor name is :: " + mentorName.length());
		System.out.println("number of characters in learnerName is :: " + learnerName.length());
		
		lastCharacterOfMentorName(mentorName);
		
	}
	
	public static void lastCharacterOfMentorName(String name) {
		int length = name.length();
		System.out.println("last character of mentor name is :: " + name.charAt(length-1));
	}
	
	

}

========================================================================================================

package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String mentorName = "Himanshu Gupta";
		String learnerName = "Joyson";
		
		// What is the first letter of mentor name
		// What is first letter of learnerName
		
		System.out.println("first letter of mentorName is :: " + mentorName.charAt(0));
		System.out.println("first letter of learnerName is :: " + learnerName.charAt(0));
		System.out.println("number of characters in mentor name is :: " + mentorName.length());
		System.out.println("number of characters in learnerName is :: " + learnerName.length());
		
		lastCharacterOfMentorName(mentorName);
		
		System.out.println(mentorName.lastIndexOf("a"));
		
	}
	
	public static void lastCharacterOfMentorName(String name) {
		int length = name.length();
		System.out.println("last character of mentor name is :: " + name.charAt(length-1));
	}
	
	
	
	

}

========================================================================================================

package guviNewProject;

public class StringClassUnderstanding {

	public static void main(String[] args) {

		String mentorName = "Himanshu Gupta";
		String learnerName = "Joyson";
		
		// What is the first letter of mentor name
		// What is first letter of learnerName
		
		System.out.println("first letter of mentorName is :: " + mentorName.charAt(0));
		System.out.println("first letter of learnerName is :: " + learnerName.charAt(0));
		System.out.println("number of characters in mentor name is :: " + mentorName.length());
		System.out.println("number of characters in learnerName is :: " + learnerName.length());
		
		lastCharacterOfMentorName(mentorName);
		
		System.out.println(mentorName.lastIndexOf("a"));
		System.out.println(learnerName.lastIndexOf("o"));
		
	}
	
	public static void lastCharacterOfMentorName(String name) {
		int length = name.length();
		System.out.println("last character of mentor name is :: " + name.charAt(length-1));
	}
	
	
	
	

}

========================================================================================================

Abstraction : One of the OOPS concepts of Java.

In java, abstraction is achieved in 2 ways : 
1) Using Abstract Classes.
2) Using Interfaces.

In encapsulation, we are wrapping the variables in a way that no-one can access it directly.

In Abstraction, Using Abstraction we are hiding the implementation details and only showing the essential features.

Abstract Method : 
Abstract Method is the one which does not have the body..


public method1(); // This is an abstract method.


Concrete Method : 
Concrete method is the one which has the body.

public method1() {
System.out.println("I am method 1");
}

========================================================================================================


How to extend an abstract in another class.

we use "extends" keyword (like we have already used in Interface for classes).

Whenver you extend any abstract class, it is mandatory to use all its abstract methods and give the body to it.

package guviNewProject;

public abstract class Vehicle {
	
	// I am going to create a abstract method means a method which does not have any body
	abstract void start();
	
	// I am going to create a concrete method means a method which has the body
	void stop() {
		System.out.println("Vehicle is about to stop....");
	}

}



package guviNewProject;

public class Car extends Vehicle{

	@Override
	void start() {
		System.out.println("Car is about to start....");
	}

}


package guviNewProject;

public class AbstractionExample {

	public static void main(String[] args) {

		Car myObject =  new Car();
		
		myObject.start();
		myObject.stop();
		
	}

}


- If we want to achieve 100% abstraction then we need to use interface.
- By using interface we can also do muliple inheritance.
- If we need to extend the interface in another class then we dont use entends keyword, we use "implements" keyword.
- In an interface, all the methods are abstract.

package guviNewProject;

public interface Animal {
	
	void makeSound();
	
	void haveFood();

}


package guviNewProject;

public class Dog implements Animal{

	@Override
	public void makeSound() {
		System.out.println("Dogs bark");
	}

	@Override
	public void haveFood() {
		System.out.println("Dogs can eat biscuits");
	}

}


package guviNewProject;

public class InterfaceExample {

	public static void main(String[] args) {
		
		Dog myObject = new Dog();
		
		myObject.makeSound();
		myObject.haveFood();

	}

}


=========================================================================================================


package guviNewProject;

public interface Animal {
	
	void makeSound();
	
	void haveFood();

}


package guviNewProject;

public class Dog implements Animal, CheckBreedOfAnimal{

	@Override
	public void makeSound() {
		System.out.println("Dogs bark");
	}

	@Override
	public void haveFood() {
		System.out.println("Dogs can eat biscuits");
	}

	@Override
	public void breedOfAnimal() {
		System.out.println("Breed of my dog is Germen Shefard");
		
	}

}


package guviNewProject;

public class InterfaceExample {

	public static void main(String[] args) {
		
		Dog myObject = new Dog();
		
		myObject.makeSound();
		myObject.haveFood();
		myObject.breedOfAnimal();

	}

}


package guviNewProject;

public interface CheckBreedOfAnimal {
	
	void breedOfAnimal();

}

Note : A very good usage of interface is that interface gives you the basic methods which all the classes should implment which are 
implementing this interface.

ChromeDriverClass - implementing WebDriver interface
FireForDriverClass - implementing WebDriver interface
SafariDriverClass - implementing WebDriver interface

=========================================================================================================

- Use of Static and Instance
- Error Handling - try, catch, finally, throw and throws

=========================================================================================================

14-Feb-2025

1.Write a program to create a class,havign 3 constructors (1-default constructor, 2-parameterised constructor) 
and then create a new class and call all these constructors from this class


package guviNewProject;

public class Class5 {

	public Class5() {
		System.out.println("I am default constructor of class5");
	}

	public Class5(int a) {
		System.out.println("I am a parametarized constructor of class5 having one parameter.");
	}

	public Class5(int a, String b) {
		System.out.println("I am a parametarized constructor of class5 having Two parameters.");
	}



}


package guviNewProject;

public class Class6 {

	public static void main(String[] args) {
		
		new Class5(); // Object of class5 has been created and we know that when the object has been created, it means its constructor will be called automatically.

		new Class5(10); // Object of class5 has been created and we know that when the object has been created with parameter then its corresponding parametarized constructor will be called automatically.
		
		new Class5(20,"Himanshu"); // Object of class5 has been created and we know that  when the object has been created with parameters then its corresponding parametarized constructor will be called automatically.
		
	}

}


2.write a pgm to create an 2 interfaces, having two methods and create a class and implement both these interfaces 
to achieve multiple inhertiance.


package guviNewProject;

public interface Interface1 {
	void method1();
	void method2();
}


package guviNewProject;

public interface Interface2 {
	void method3();
	void method4();
}


package guviNewProject;

public class ClassImplementingTwoInterfaces implements Interface1, Interface2 {

	public static void main(String[] args) {
		
		ClassImplementingTwoInterfaces myObject = new ClassImplementingTwoInterfaces();
		myObject.method1();
		myObject.method2();
		myObject.method3();
		myObject.method4();
		
	}

	@Override
	public void method3() {
		System.out.println("I am method3 of interface2");
	}

	@Override
	public void method4() {
		System.out.println("I am method4 of interface2");
		
	}

	@Override
	public void method1() {
		System.out.println("I am method1 of interface1");
		
	}

	@Override
	public void method2() {
		System.out.println("I am method2 of interface1");
		
	}

}

=========================================================================================================

1) Static and Instance Variable.
2) Exception Handling.

Instance Variable : 

- Instance Variable is a type of variable that is declared in the class but outside the method.
- Instance Variable are accessed using the object references.
- All the time a new instance has been created in the memory whenever you are creating the object of it.


package guviNewProject;

public class MyCar {
	
	String model; // Instance Variable
	int price; // Instance Variable
	
	public MyCar(String model, int price) {
		this.model = model;
		this.price = price;
	}
	
	void display() {
		System.out.println("Model of my car is :: " + model + " and Price of my car is :: " + price);
	}
	
	public static void main(String[] args) {
		MyCar myObject1 =  new MyCar("Maruti",200000);
		myObject1.display();
	}

}

=========================================================================================================

This is an alternative way to understand instance variable : 

package guviNewProject;

public class MyCar {
	
	String model; // Instance Variable
	int price; // Instance Variable
	
	public MyCar(String model, int price) {
		String name = "Deepikha";
		this.model = model;
		this.price = price;
	}
	
	public static void main(String[] args) {
		MyCar myObject =  new MyCar("Maruti",200000);
		System.out.println("model of my car is :: " + myObject.model);
		System.out.println("price is :: " + myObject.price);
	}

}


=========================================================================================================

Static Variables : 

- Static variable is used by using the keyword "static";
- You can use this static variable by using the className.

It means use you can use it like : 

ClassName.StaticVariableName;

package guviNewProject;

public class ClassHavingStaticVariables {
	
	public static String companyName = "Guvi";
	public static String batchCategory = "Java Automation";

}


package guviNewProject;

public class ClassCallingStaticVariablesOfAnotheClass {

	public static void main(String[] args) {
		
		System.out.println("Company name in which I learn is :: " + ClassHavingStaticVariables.companyName);
		System.out.println("batch type in which I have been enrolled is :: " + ClassHavingStaticVariables.batchCategory);

	}

}


Combination of Instance and Static Variable : 

package guviNewProject;

public class ClassCallingStaticVariablesOfAnotheClass {

	public static void main(String[] args) {
		
		System.out.println("Company name in which I learn is :: " + ClassHavingStaticVariables.companyName);
		System.out.println("batch type in which I have been enrolled is :: " + ClassHavingStaticVariables.batchCategory);
		
		ClassHavingStaticVariables.batchCategory = "Manual Testing";
		System.out.println("batch type in which I have been enrolled is :: " + ClassHavingStaticVariables.batchCategory);
		
		ClassHavingStaticVariables myObj1 = new ClassHavingStaticVariables();
		myObj1.learnerName = "Joyson";
		System.out.println("learner name is :: " + myObj1.learnerName);
		
		ClassHavingStaticVariables myObj2 = new ClassHavingStaticVariables();
		myObj2.learnerName = "Gopi";
		System.out.println("learner name is :: " + myObj2.learnerName);
		System.out.println("learner name is :: " + myObj1.learnerName);
		

	}

}


==============================================================================================================

How to access Static and Non-Static methods of any class in another class : 

package guviNewProject;

public class ClassHavingStaticVariables {
	
	public static String companyName = "Guvi";
	public static String batchCategory = "Java Automation";
	
	public String learnerName = "Deepika";
	
	public static void m1() {
		
	}
	
	public void m2() {
		
	}

}


package guviNewProject;

public class ClassCallingStaticVariablesOfAnotheClass {

	public static void main(String[] args) {
		
		System.out.println("Company name in which I learn is :: " + ClassHavingStaticVariables.companyName);
		System.out.println("batch type in which I have been enrolled is :: " + ClassHavingStaticVariables.batchCategory);
		
		ClassHavingStaticVariables.batchCategory = "Manual Testing";
		System.out.println("batch type in which I have been enrolled is :: " + ClassHavingStaticVariables.batchCategory);
		
		ClassHavingStaticVariables myObj1 = new ClassHavingStaticVariables();
		myObj1.learnerName = "Joyson";
		System.out.println("learner name is :: " + myObj1.learnerName);
		
		ClassHavingStaticVariables myObj2 = new ClassHavingStaticVariables();
		myObj2.learnerName = "Gopi";
		System.out.println("learner name is :: " + myObj2.learnerName);
		System.out.println("learner name is :: " + myObj1.learnerName);
		
		ClassHavingStaticVariables.m1();
		myObj1.m2();
		myObj2.m2();
		

	}

}


==============================================================================================================

Exception Handling : 

In Java we can get any exception while we are running the code.

package guviNewProject;

public class ClassHavingAnException {

	public static void main(String[] args) {
		
		int[] myArray = {21,70,30};
		
		System.out.println(myArray[0]);
		System.out.println(myArray[1]);
		System.out.println(myArray[2]);
		System.out.println(myArray[3]);
		
	}

}


Whenever we get any exception we need to handle it so that the program does not terminate abruptly.
package guviNewProject;

public class ClassHavingAnException {

	public static void main(String[] args) {
		
		int[] myArray = {21,70,30};
		
		try  { 
		System.out.println(myArray[0]);
		System.out.println(myArray[1]);
		System.out.println(myArray[2]);
		System.out.println(myArray[3]);
		}
		catch (Exception e) {
			System.out.println("Program execution is done");
		}
		}
		
	}


How many types of Exception that we have in Java : 

1) Checked Exception
2) Unchecked Exception 

Checked Exception means the exception that we get at compile time.
Unchecked Exceptions are the exceptions that we get at runtime.

Checked Exception : 
- IO exception.
- SQL exception.
- FileNotFoundException.
- Interrupted Exception.

Unchecked Exception :
- NullPointerException.
- ArrayIndexOutOfBoundException.
- Arithemtic Exception.
- IllelegalArgumentException.


Parent Exception of all the exceptions is "Exception".

How to handle Exceptions : 

try
catch
finally
throw
throws

Whenever we feel that my code can have an exception, we should use try catch and finally.

Syntax : 

try {

--- code ---

}

catch {

}

it is mantory to use catch/finally when we are using try.

package guviNewProject;

public class ArithemeticException {

	public static void main(String[] args) {
		
		try {
		int value = 10/0;
		System.out.println("value is " + value);
		}
		
		catch (ArithmeticException e) {
			System.out.println("This is an arithematic exception, please check your code and do a correct calculation");
		}
		
		
	}

}


How to use multiple catch exception (multipl catch blocks) :

package guviNewProject;

public class ArithemeticException {

	public static void main(String[] args) {
		
		try {
			
		int value = 10/5;
		System.out.println("value is " + value);
		
		int[] myArray = {12,85};
		System.out.println("Value at position 3 in my array is :: " + myArray[2]);
		
		
		}
		
		catch (ArithmeticException e) {
			System.out.println("This is an arithematic exception, please check your code and do a correct calculation");
		}
		catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Please check the index you are trying to access from your array");
		}
		catch (Exception e) {
			System.out.println("Something went wrong, Please check your code");
		}
		
		
	}

}


=====================================================================================================================

package guviNewProject;

public class ArithemeticException {

	public static void main(String[] args) {
		
		try {
			
		int value = 10/5;
		System.out.println("value is " + value);
		
		int[] myArray = {12,85};
		System.out.println("Value at position 3 in my array is :: " + myArray[2]);
		
		
		}
		
		catch (ArithmeticException e) {
			System.out.println("This is an arithematic exception, please check your code and do a correct calculation");
			e.printStackTrace();
		}
		catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Please check the index you are trying to access from your array");
			e.printStackTrace();
		}
		catch (Exception e) {
			System.out.println("Something went wrong, Please check your code");
			e.printStackTrace();
		}
		
		
	}

}


=====================================================================================================================

What is the difference between catch and finally : 

Catch block will be executed only when there is an exception in try block.
But, finally block will always be executed whether there is any exception or not (does not matter).

package guviNewProject;

public class ArithemeticException {

	public static void main(String[] args) {
		
		try {
			
		int value = 10/5;
		System.out.println("value is " + value);
		
		int[] myArray = {12,85};
		System.out.println("Value at position 2 in my array is :: " + myArray[1]);
		
		
		}
		
		catch (ArithmeticException e) {
			System.out.println("This is an arithematic exception, please check your code and do a correct calculation");
		}
		catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Please check the index you are trying to access from your array");
		}
		catch (Exception e) {
			System.out.println("Something went wrong, Please check your code");
		}
		
		finally {
			System.out.println("Code execution is done");
		}
		
		
	}

}


=====================================================================================================================

package guviNewProject;

public class ArithemeticException {

	public static void main(String[] args) {
		
		try {
			
		int value = 10/5;
		System.out.println("value is " + value);
		
		int[] myArray = {12,85};
		System.out.println("Value at position 3 in my array is :: " + myArray[2]);
		
		
		}
		
		catch (ArithmeticException e) {
			System.out.println("This is an arithematic exception, please check your code and do a correct calculation");
		}
		catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Please check the index you are trying to access from your array");
		}
		catch (Exception e) {
			System.out.println("Something went wrong, Please check your code");
		}
		
		finally {
			System.out.println("Code execution is done");
		}
		
		
	}

}

=====================================================================================================================

If you are using finally, then it is not mandatory to use catch.
If you are using catch, then it is not mantory to use finally.

in short, it is mandatory to use either catch or finally or both when we are using try.


=====================================================================================================================

package guviNewProject;

public class ArithemeticException {

	public static void main(String[] args) {
		
		try {
			
		int value = 10/5;
		System.out.println("value is " + value);
		
		int[] myArray = {12,85};
		System.out.println("Value at position 3 in my array is :: " + myArray[2]);
		
		
		}
		
		
		finally {
			System.out.println("Code execution is done");
		}
		
		
	}

}


=====================================================================================================================

package guviNewProject;

public class ArithemeticException {

	public static void main(String[] args) {
		
		try {
			
		int value = 10/5;
		System.out.println("value is " + value);
		
		int[] myArray = {12,85};
		System.out.println("Value at position 3 in my array is :: " + myArray[0]);
		
		
		}
		
		
		finally {
			System.out.println("Code execution is done");
		}
		
		
	}

}

=====================================================================================================================

What if we have an exception in the catch block :

If there is any exception in the catch block, then it will not be handled.

If there is any exception in the finally bloc, then it will not be handled.

=====================================================================================================================

in general, we used to write the code of closing the file, closing the database connection, closing the browser, such line of code in finally block.

=====================================================================================================================

Prime Number Program : 

Prime number is a number that is divisible by 1 and itself only.

package guviNewProject;

public class PrimeNumberProgram {

	static int temp=0;
	
	public static void main(String[] args) {
		checkPrimeNumber(7);
	}
	
	public static void checkPrimeNumber(int number) {
		
		for(int count=2;count<number;count++) {
			if(number%count==0) {
				temp = temp+1;
				break;
			}
		}
		if(temp>0) {
			System.out.println("Its not a prime number");
		}
		else {
			System.out.println("its a prime number");
		}
		
	}
	

}



Prime Number Program (Optimized code) : 

package guviNewProject;

public class PrimeNumberProgram {

	static int temp=0;
	
	public static void main(String[] args) {
		checkPrimeNumber(19);
	}
	
	public static void checkPrimeNumber(int number) {
		
		for(int count=2;count<=number/2;count++) {
			if(number%count==0) {
				temp = temp+1;
				break;
			}
		}
		if(temp>0) {
			System.out.println("Its not a prime number");
		}
		else {
			System.out.println("its a prime number");
		}
		
	}
	

}


===========================================================================================

Factorial : 

we have a number 5 :

5*4*3*2*1

we have a number 3 :
3*2*1

Factorial Code is :

package guviNewProject;

public class FactorialProgram {
	
	static int factorial=1;

	public static void main(String[] args) {
			printFactorialOfNumber(5);
	}
	
	public static void printFactorialOfNumber(int number ) {
		
		for(int count=number;count>=1;count--) {
			factorial = factorial * count;  // 1*3 = 3 => 3 * 2 => 6 => 6 * 1 => 6
		}
		
		System.out.println("Factorial is :: " + factorial);
		
	}

}

====================================================================================================

throw and throws keyword : 

Both are the keywords used in Java.

But what is the difference ??

throw keyword is used to explicitly throw an exception.

throws is just a informing that whenever you are going to use my method, it can throw that exception.

throw is used inside the method.
throws is used in method signature.


====================================================================================================

package guviNewProject;

public class thowsExceptionUnderstanding {

	public static void main(String[] args) {
		try {
		divisionOfTwoNumbers(15, 0);
		}
		catch (Exception e) {
			System.out.println("Please check that num2 cant be zero");
		}
	}
	
	public static void divisionOfTwoNumbers(int num1, int num2) throws ArithmeticException{
		int division = 	num1/num2;
		System.out.println("division is :: " + division);
	}

}


====================================================================================================

package guviNewProject;

public class thowsExceptionUnderstanding {

	public static void main(String[] args) {
		try {
		divisionOfTwoNumbers(15, 0);
		}
		catch (ArithmeticException e) {
			System.out.println("Please check that num2 cant be zero");
		}
		catch (Exception e) {
			System.out.println("Something went wrong, please check your inputs");
		}
	}
	
	public static void divisionOfTwoNumbers(int num1, int num2) throws Exception{
		int division = 	num1/num2;
		System.out.println("division is :: " + division);
	}

}



====================================================================================================

package guviNewProject;

public class thowsExceptionUnderstanding {

	public static void main(String[] args) {
		try {
		divisionOfTwoNumbers(15, 0);
		}
		catch (ArithmeticException e) {
			System.out.println("Please check that num2 cant be zero");
		}
		catch (Exception e) {
			System.out.println("Something went wrong, please check your inputs");
		}
	}
	
	public static void divisionOfTwoNumbers(int num1, int num2) throws ArithmeticException, ArrayIndexOutOfBoundsException{
		int division = 	num1/num2;
		System.out.println("division is :: " + division);
	}

}



====================================================================================================

What is the parent class of all the Exception Classes ?

Answer : "Exception" class is the parent class of all the exception classes.



====================================================================================================

code for throw.

throw is the keyword in java that used to explicitly throw an exception.

package guviNewProject;

public class ThrowKeywordUnderstanding {

	public static void main(String[] args) {

		throw new RuntimeException("I am learning here, how throw keyword works");
		
	}

}

====================================================================================================

package guviNewProject;

public class ThrowKeywordProgram2 {

	public static void main(String[] args) {
		checkAge(16);
	}
	
	public static void checkAge(int age) {
		
		if(age<18) {
			throw new IllegalArgumentException("You are not allowed to participate in this this GUVI program");
		}
		else {
			System.out.println("Most welcome, you are allowed to participate in this Guvi Program");
		}
		
	}

}


======================================================================================================

One more thing, if you want to create your own customized exception, you can do it using throw keyword.

public class CustomException extends Exception {
    
    // Constructor to accept error message
    public CustomException(String message) {
        super(message); // Pass the message to the parent Exception class
    }
}


// Main.java
public class Main {
    
    public static void main(String[] args) {
        try {
            checkAge(15); // This will throw CustomException because age is less than 18
        } catch (CustomException e) {
            System.out.println("Caught Exception: " + e.getMessage());
        }
    }
    
    // Method that throws CustomException
    public static void checkAge(int age) throws CustomException {
        if (age < 18) {
            throw new CustomException("Age is less than 18, not allowed.");
        } else {
            System.out.println("You are allowed to proceed.");
        }
    }
}

======================================================================================================

Collections : It is a class.
Collection : It is an interface.

Collections : 
List,
ArrayList,
LinkedList,
HashMap,
Map,
HashSet,
Set

====================================================================================================

Array : 
we take same data type and it is fixed in length.

I want to make it dynamic : 

Simply use, List.

===================================================================================================

I have already told you that for all the primitive data type, like int, float etc. we have a wrapper class.

And always remember that Collections accept the wrapper classes in place of primitive data type.

===================================================================================================

How to add values in a list : 

add method.

===================================================================================================

How to get the size of your list :

size method.

===================================================================================================

How to get the value using the index number from a list and from where the indexing starts in List :

use get method.
indexing starts from zero.


package guviNewProject;

import java.util.ArrayList;
import java.util.List;

public class ListUnderstanding {

	public static void main(String[] args) {
		myArray();
		myList();
	}
	
	public static void myArray() {
		int[] myArray = new int[5];
		System.out.println("length of my array is :: " + myArray.length);
	}
	
	public static void myList() {
		List<Integer> myList = new ArrayList<>();
		myList.add(12); // 0 
		myList.add(50);  // 1
		myList.add(60); // 2
		myList.add(5); // 3
		myList.add(90);  // 4
		myList.add(500);  // 5
		myList.add(507);  // 6 
		myList.add(550); // 7 
		myList.add(450); // 8
		myList.add(350); // 9
		myList.add(2550); // 10
		myList.add(2541); // 11
		myList.add(78); // 12
		myList.add(51);  // 13
		myList.add(73); // 14
		System.out.println("length of my list  is :: " + myList.size());
		System.out.println("value at position 5 in my list is :: " + myList.get(4));
		System.out.println("value at position 15 in my list is :: " + myList.get(14));
		for (int count=0; count<myList.size();count++) {
			System.out.println("value in my list at position  " + (count+1) + " is " +  myList.get(count));
		}
	}

}


===================================================================================================

length of my array is :: 5
=========================================
length of my list  is :: 17
value at position 5 in my list is :: 90
value at position 15 in my list is :: 73
value in my list at position  1 is 12
value in my list at position  2 is 50
value in my list at position  3 is 60
value in my list at position  4 is 5
value in my list at position  5 is 90
value in my list at position  6 is 500
value in my list at position  7 is 507
value in my list at position  8 is 550
value in my list at position  9 is 450
value in my list at position  10 is 350
value in my list at position  11 is 2550
value in my list at position  12 is 2541
value in my list at position  13 is 78
value in my list at position  14 is 51
value in my list at position  15 is 73
value in my list at position  16 is 75
value in my list at position  17 is 980
=========================================
length of my list  is :: 17
value at position 5 in my list is :: 90
value at position 15 in my list is :: 73
value in my list at position  1 is 12
value in my list at position  2 is 50
value in my list at position  3 is 60
value in my list at position  4 is 5
value in my list at position  5 is 90
value in my list at position  6 is 500
value in my list at position  7 is 507
value in my list at position  8 is 550
value in my list at position  9 is 450
value in my list at position  10 is 350
value in my list at position  11 is 2550
value in my list at position  12 is 2541
value in my list at position  13 is 78
value in my list at position  14 is 51
value in my list at position  15 is 73
value in my list at position  16 is 75
value in my list at position  17 is 1200

===================================================================================================

ArrayList,List,LinkedList are not linked with Array at all.
Array and List are two separate things in Java.

===================================================================================================


package guviNewProject;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class ListUnderstanding {

	public static void main(String[] args) {
		int[] inputNumbers = {2,5,7,50,19,600,500,18,17,911,4050,200,654,15,70000};
		addNumbersInArray(inputNumbers);
	}
	
	public static void myArrayForBeginners() {
		int[] myArray = new int[500];
		System.out.println("length of my array is :: " + myArray.length);
	}
	
	public static void myListUsingArrayList() {
		List<Integer> myList = new ArrayList<>();
		myList.add(12); // 0 
		myList.add(50);  // 1
		myList.add(60); // 2
		myList.add(5); // 3
		myList.add(90);  // 4
		myList.add(500);  // 5
		myList.add(507);  // 6 
		myList.add(550); // 7 
		myList.add(450); // 8
		myList.add(350); // 9
		myList.add(2550); // 10
		myList.add(2541); // 11
		myList.add(78); // 12
		myList.add(51);  // 13
		myList.add(73); // 14
		myList.add(75); // 15
		myList.add(980); // 16
		System.out.println("length of my list  is :: " + myList.size());
		System.out.println("value at position 5 in my list is :: " + myList.get(4));
		System.out.println("value at position 15 in my list is :: " + myList.get(14));
		for (int count=0; count<myList.size();count++) {
			System.out.println("value in my list at position  " + (count+1) + " is " +  myList.get(count));
		}
	}
	
	public static void myListUsingLinkedList() {
		List<Integer> myList = new LinkedList<>();
		myList.add(12); // 0 
		myList.add(50);  // 1
		myList.add(60); // 2
		myList.add(5); // 3
		myList.add(90);  // 4
		myList.add(500);  // 5
		myList.add(507);  // 6 
		myList.add(550); // 7 
		myList.add(450); // 8
		myList.add(350); // 9
		myList.add(2550); // 10
		myList.add(2541); // 11
		myList.add(78); // 12
		myList.add(51);  // 13
		myList.add(73); // 14
		myList.add(75); // 15
		myList.add(1200); // 16
		System.out.println("length of my list  is :: " + myList.size());
		System.out.println("value at position 5 in my list is :: " + myList.get(4));
		System.out.println("value at position 15 in my list is :: " + myList.get(14));
		for (int count=0; count<myList.size();count++) {
			System.out.println("value in my list at position  " + (count+1) + " is " +  myList.get(count));
		}
	}

	public static void addNumbersInArray(int[] myInputArr) {
		List<Integer> myList = new ArrayList<Integer>();
		for(int count=0;count<myInputArr.length;count++) {
			myList.add(myInputArr[count]);
		}
		System.out.println("my list is :: " +myList);
		
	}
	
}


=================================================================================================

how to remove the value from list using index : 

package guviNewProject;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class ListUnderstanding {

	public static void main(String[] args) {
		removeValueFromList();
	}
	
	public static void myArrayForBeginners() {
		int[] myArray = new int[500];
		System.out.println("length of my array is :: " + myArray.length);
	}
	
	public static void myListUsingArrayList() {
		List<Integer> myList = new ArrayList<>();
		myList.add(12); // 0 
		myList.add(50);  // 1
		myList.add(60); // 2
		myList.add(5); // 3
		myList.add(90);  // 4
		myList.add(500);  // 5
		myList.add(507);  // 6 
		myList.add(550); // 7 
		myList.add(450); // 8
		myList.add(350); // 9
		myList.add(2550); // 10
		myList.add(2541); // 11
		myList.add(78); // 12
		myList.add(51);  // 13
		myList.add(73); // 14
		myList.add(75); // 15
		myList.add(980); // 16
		System.out.println("length of my list  is :: " + myList.size());
		System.out.println("value at position 5 in my list is :: " + myList.get(4));
		System.out.println("value at position 15 in my list is :: " + myList.get(14));
		for (int count=0; count<myList.size();count++) {
			System.out.println("value in my list at position  " + (count+1) + " is " +  myList.get(count));
		}
	}
	
	public static void myListUsingLinkedList() {
		List<Integer> myList = new LinkedList<>();
		myList.add(12); // 0 
		myList.add(50);  // 1
		myList.add(60); // 2
		myList.add(5); // 3
		myList.add(90);  // 4
		myList.add(500);  // 5
		myList.add(507);  // 6 
		myList.add(550); // 7 
		myList.add(450); // 8
		myList.add(350); // 9
		myList.add(2550); // 10
		myList.add(2541); // 11
		myList.add(78); // 12
		myList.add(51);  // 13
		myList.add(73); // 14
		myList.add(75); // 15
		myList.add(1200); // 16
		System.out.println("length of my list  is :: " + myList.size());
		System.out.println("value at position 5 in my list is :: " + myList.get(4));
		System.out.println("value at position 15 in my list is :: " + myList.get(14));
		for (int count=0; count<myList.size();count++) {
			System.out.println("value in my list at position  " + (count+1) + " is " +  myList.get(count));
		}
	}

	public static void addNumbersInArray(int[] myInputArr) {
		List<Integer> myList = new ArrayList<Integer>();
		for(int count=0;count<myInputArr.length;count++) {
			myList.add(myInputArr[count]);
		}
		System.out.println("my list is :: " +myList);
		
	}
	
	public static void removeValueFromList() {
		
		List<String> myList = new ArrayList<String>();
		myList.add("Himanshu"); // 0
		myList.add("Saran"); // 1
		myList.add("Vidhya"); // 2
		myList.add("Joyson");  // 3
		myList.add("Rosemarry"); // 4
		System.out.print("my original list is :: " + myList);
		System.out.println();
		myList.remove(4);
		System.out.print("my list after remove the index value 4 is :: " + myList);
	}
	
}


=================================================================================================

// Assignment 1 : Write a program to create a new list and add 10 numbers in it and print the 5th and 6th element.

package guviNewProject;

import java.util.ArrayList;
import java.util.List;

// Assignment 1 : Write a program to create a new list and add 10 numbers in it and print the 5th and 6th element.

public class Assignment1_ForList {

	public static void main(String[] args) {
		addNumbersToListAndPrint();
	}
	
	public static void addNumbersToListAndPrint() {
		List<Integer> myList = new ArrayList<Integer>();
		myList.add(121);  // Position 1 - Index 0
		myList.add(122);  // Position 2 - Index 1
		myList.add(123);  // Position 3 - Index 2
		myList.add(124);  // Position 4 - Index 3
		 myList.add(125);  // Position 5 - Index 4
		 myList.add(126);  // Position 6 - Index 5
		myList.add(127);  // Position 7 - Index 6
		myList.add(128);  // Position 8 - Index 7
		myList.add(129);  // Position 9 - Index 8
		myList.add(130);  // Position 10 - Index 9
		
		System.out.println("Element at position 5th is :: " + myList.get(4));
		System.out.println("Element at position 6th is :: " + myList.get(5));
		
	}

}


==================================================================================================

package guviNewProject;

import java.util.ArrayList;
import java.util.List;

// Assignment 2 : Write a program to create a new list and print the number at some Specific position 

public class Assignment1_ForList {

	public static void main(String[] args) {
		addNumbersToListAndPrint(10);
	}
	
	public static void addNumbersToListAndPrint(int positionNumber) {
		List<Integer> myList = new ArrayList<Integer>();
		myList.add(121);  // Position 1 - Index 0
		myList.add(7452);  // Position 2 - Index 1
		myList.add(1111);  // Position 3 - Index 2
		myList.add(9521);  // Position 4 - Index 3
		 myList.add(525);  // Position 5 - Index 4
		 myList.add(695);  // Position 6 - Index 5
		myList.add(127);  // Position 7 - Index 6
		myList.add(584);  // Position 8 - Index 7
		myList.add(5214);  // Position 9 - Index 8
		myList.add(1000);  // Position 10 - Index 9
		
		System.out.println("Element at position number " + positionNumber  + " is :: " + myList.get(positionNumber-1));
		
	}

}

==================================================================================================

Assignment 3 : Write a program to create a new list and add 5 numbers in this and print it, and 
then remove 3rd and 4th number and print the list again (after removing the numbers).

package guviNewProject;

import java.util.ArrayList;
import java.util.List;

public class ListAssignment3 {
	
	// Assignment 3 : Write a program to create a new list and add 5 numbers in this and print it, and 
	// then remove 3rd and 4th number and print the list again (after removing the numbers).

	public static void main(String[] args) {
	
		List<Integer> myListForAssignment = new ArrayList<Integer>();
		myListForAssignment.add(154); // position 1, index 0
		myListForAssignment.add(412); // position 2, index 1
		myListForAssignment.add(751); // position 3, index 2
		myListForAssignment.add(325); // position 4, index 3 
		myListForAssignment.add(951); // position 5, index 4
		System.out.println("My Original List is :: " + myListForAssignment);
		
		// Remove the number from position 3 it means index 2:
		myListForAssignment.remove(2);
		System.out.println("My List after removing 3rd element is :: " + myListForAssignment);
		// Remove the number from position 4 it means index 2 in the list after removal of element at position number 3:
		myListForAssignment.remove(2);
		
		System.out.println("My List after removing 3rd and 4th element is :: " + myListForAssignment);
		
	}
	
	

}


==================================================================================================

Collection and Collections : 

Collection : This is an interface in Java, it is a part of java.util package. Collection is th interface in Java Collection Framework.
It provides the methods to add, remove elements in the collection.

Collections : This is like a utility in java.util package. Collections Classes Implements Collection Interface.

List is an interface :

Whatever the methods we are using in List interface, all are abstract, it means all these methods does not have body.

But the classes which are implementing this List interface are having the code for these methods.

ArrayList 
LinkedList are the classes which implements List Interface.

Why do we use List in declaring the ArrayList: 

Statement 1 : ArrayList myList = new ArrayList();
Statement 2 : List myList = new ArrayList();

Both the statements are correct, but we recommend to use Statement2 because List is an interface which works as a parent of ArrayList.

Why do we use List in declaring the LinkedList: 

Statement 1 : LinkedList myList = new LinkedList();
Statement 2 : List myList = new LinkedList();

Both the statements are correct, but we recommend to use Statement2 because List is an interface which works as a parent of LinkedList.

List<Integer> myList = new ArrayList<Integer>();

myList = new LinkedList<Integer>();
myList = new ArrayList<Integer>();
myList = new LinkedList<Integer>();
myList = new ArrayList<Integer>();
myList = new LinkedList<Integer>();
myList = new ArrayList<Integer>();
myList = new LinkedList<Integer>();
myList = new ArrayList<Integer>();

==================================================================================================

What are the collection interface : List, Set, Map
What are the collections classes : ArrayList, LinkedList, HashMap, HashSet etc.

What is the difference between ArrayList and LinkedList :

ArrayList is fast when we need to access the elements.
LinkedList is slow when we need to access the elements.

LinkedList : 

package guviNewProject;

import java.util.LinkedList;
import java.util.List;

public class LinkedListClassUnderstanding {

	public static void main(String[] args) {
		
		List<Integer> myList = new LinkedList<Integer>();
		myList.add(12);
		myList.add(547);
		System.out.println("Values in my list are :: " + myList);
		myList.remove(1);
		System.out.println("Values in my list after removing the second number is  :: " + myList);

	}

}



ArrayList : 

package guviNewProject;

import java.util.ArrayList;
import java.util.List;

public class LinkedListClassUnderstanding {

	public static void main(String[] args) {
		
		List<Integer> myList = new ArrayList<Integer>();
		myList.add(12);
		myList.add(547);
		System.out.println("Values in my list are :: " + myList);
		myList.remove(1);
		System.out.println("Values in my list after removing the second number is  :: " + myList);

	}

}



Insertion and Deletion of elements is fast in LinkedList.
Insertion and Deletion of elements is slow in ArrayList.

What is the node in LinkedList : 

Node means it is like a box that stores 2 things : Data, Next 

LinkedList : 

[Data | Next] -> [Data | Next] -> [Data | Next] -> [Data | Next]

==================================================================================================

HashMap and Map : 

Map is an interface.
HashMap is the class that implements Map Interface.
HashTable, TreeMap are the classes which implements Map Interface.

HashSet and Set : 

Set is an interface.
HashSet is the class that implements Set interface.

==================================================================================================

Map is an interface, its having key and value pair.

We cant have duplicate Keys in HashMap.

Syntax : 

Both are correct but second statement is recommended : 

HashMap<String, String> myMap = new HashMap<String, String>();
Map<String, String> myMap = new HashMap<String, String>();

==================================================================================================


How to enter values in HashMap : 

use put method and enter your keyName and Value.

package guviNewProject;

import java.util.HashMap;

public class HashMapUnderstanding {

	public static void main(String[] args) {
		
		HashMap<String, String> myMap = new HashMap<String, String>();
		
		myMap.put("mentorName", "Himanshu");
		System.out.println("My map is :: " + myMap);
		
		myMap.put("learnerName1", "Gopi");
		System.out.println("My map is :: " + myMap);
		
		myMap.put("learnerName2", "Hemavathy");
		System.out.println("My map is :: " + myMap);


	}

}


==================================================================================================

How to get the value from HashMap using its Keyname : 

use get method.

package guviNewProject;

import java.util.HashMap;

public class HashMapUnderstanding {

	public static void main(String[] args) {
		
		HashMap<String, String> myMap = new HashMap<String, String>();
		
		myMap.put("mentorName", "Himanshu");
		System.out.println("My map is :: " + myMap);
		
		myMap.put("learnerName1", "Gopi");
		System.out.println("My map is :: " + myMap);
		
		myMap.put("learnerName2", "Hemavathy");
		System.out.println("My map is :: " + myMap);
		
		String value = myMap.get("learnerName1");
		System.out.println("value of learnerName1 is :: " + value);

	}

}


==================================================================================================

package guviNewProject;

import java.util.HashMap;
import java.util.Map;

public class HashMap2 {

	public static void main(String[] args) {
		
		Map<String, Integer> myMap = new HashMap<String, Integer>();
		
		myMap.put("Himanshu", 149);
		myMap.put("Rosemarry", 30);
		
		System.out.println("Employee Id of Himanshu is :: " + myMap.get("Himanshu"));

	}

}

==================================================================================================

HashMap : 

Assignment 1 : 

Step1 : Write a Program to create a HashMap (of String,String type) and Enter 4 values like below :

mentorName, Himanshu
Learner1 , Venkata
Learner2, Roopa
Learner3, Joyson

Step 2 : Fetch all the values for all the keys.
Step 3 : Fetch the value of key "learner5", as it does not exixt in our map, so it will throw the exception,
catch this exception using try catch.

Output :
Learner1 , Venkata
Learner2, Roopa
Learner3, Joyson
Key Learner5 does not exist in our map.



package guviNewProject;

import java.util.HashMap;
import java.util.Map;

public class AssignmentForHashMap {

	public static void main(String[] args)  throws Exception{

		// A new map has been created 
		Map<String, String> myMapForAssignment = new HashMap<>();
		// Values has been added in the HashMap
		myMapForAssignment.put("mentorName", "Himanshu");
		myMapForAssignment.put("Learner1", "Venkata");
		myMapForAssignment.put("Learner2", "Roopa");
		myMapForAssignment.put("Learner3", "Joyson");
		// Need to print all the values of HashMap on console
		System.out.println("Value for mentor name is :: " + myMapForAssignment.get("mentorName"));
		System.out.println("Value for learner 1 is :: " + myMapForAssignment.get("Learner1"));
		System.out.println("Value for learner 2 is :: " + myMapForAssignment.get("Learner2"));
		System.out.println("Value for learner 3 is :: " + myMapForAssignment.get("Learner3"));

		// Fetch the value for key as Learner5
		if(myMapForAssignment.containsKey("Learner5")) {
			System.out.println("Value for learner 5 is :: " + myMapForAssignment.get("Learner5"));
		}
		else {
			throw new Exception();
		}
	}

}


==================================================================================================

A very basic PPT creation takes like 5-6 hours and if the PPT is little complex it can take 2-5 days also,
but if you are going to use "Gamma App" -> https://gamma.app/, then you can create your PPT in just 2 minutes.

==================================================================================================

HashSet : 

Set is an interface.
HashSet is the Class that implements Set interface.

No Duplicate values are allowed in HashSet.

difference between HashSet and HashMap : 

In HashMap, duplicate values are allowed.
In HashSet, duplicate values are not allowed.

To add the values in HashSet : 
Simply use - add method

package guviNewProject;

import java.util.HashSet;

public class HashSetClassUnderstanding {

	public static void main(String[] args) {
		methodForHashSetCreation();
	}
	
	public static void methodForHashSetCreation() {
		
		HashSet<String> mySet = new HashSet<String>();
		
		// How to add elements in Set : 
		// Use add method
		
		mySet.add("Apple");
		mySet.add("Banana");
		mySet.add("Orange");
		mySet.add("Mango");
		mySet.add("Orange");
		
		System.out.println("My Set is :: " + mySet);
		
	}

}

==================================================================================================

package guviNewProject;

import java.util.HashSet;

public class HashSetClassUnderstanding {

	public static void main(String[] args) {
		methodForHashSetCreation();
	}
	
	public static void methodForHashSetCreation() {
		
		HashSet<String> mySet = new HashSet<String>();
		
		// How to add elements in Set : 
		// Use add method
		
		mySet.add("Apple");
		mySet.add("Banana");
		mySet.add("Orange");
		mySet.add("Mango");
		mySet.add("Orange");
		mySet.add("Mango");
		mySet.add("Banana");
		mySet.add("Apple");
		
		System.out.println("My Set is :: " + mySet);
		
	}

}






==================================================================================================

How to remove values from HashSet : 

use remove method : 


package guviNewProject;

import java.util.HashSet;

public class HashSetClassUnderstanding {

	public static void main(String[] args) {
		methodForHashSetCreation();
	}
	
	public static void methodForHashSetCreation() {
		
		HashSet<String> mySet = new HashSet<String>();
		
		// How to add elements in Set : 
		// Use add method
		
		mySet.add("Apple");
		mySet.add("Banana");
		mySet.add("Orange");
		mySet.add("Mango");
		
		System.out.println("My Set is :: " + mySet);
		
		// I want to remove Orange from my Set : 
		mySet.remove("Orange");
		System.out.println("My Updated Set is :: " + mySet);
		
	}

}

==================================================================================================

package guviNewProject;

import java.util.HashSet;

public class HashSetClassUnderstanding {

	public static void main(String[] args) {
		methodForHashSetCreation();
	}
	
	public static void methodForHashSetCreation() {
		
		HashSet<String> mySet = new HashSet<String>();
		
		// How to add elements in Set : 
		// Use add method
		
		mySet.add("Apple");
		mySet.add("Banana");
		mySet.add("Orange");
		mySet.add("Mango");
		
		System.out.println("My Set is :: " + mySet);
		
		// I want to remove Orange from my Set : 
		mySet.remove("Orange");
		mySet.remove("Banana");
		System.out.println("My Updated Set is :: " + mySet);
		
	}

}

Output : 
My Set is :: [Apple, Mango, Orange, Banana]
My Updated Set is :: [Apple, Mango]


==================================================================================================

Only 3 Collections are used in Automation Testers World : 

1) ArrayList (using List collection).
2) HashMap (using Map collection).
3) HashSet (using Set collection).

These are the three Collections that we use in Java.

LinkedList is never used  - This is not used because all the useful methods of LinkedList are also there in ArrayList also.
TreeMap is never used - 
HashTable is never used - 
Vector is never used - 
Queue is never used - 


Apart from collection 5 things are generally used as the data type : int, float, boolean, String, Array

==================================================================================================

Apart from OOPS Concepts if you are going to learn below topics then you are in a good shape of Java : 

1) int 
2) float
3) boolean
4) String
5) Array 
6) ArrayList
7) HashMap
8) HashSet

==================================================================================================

File Handling : Using Apache POI (File Handling means how to handle Excel Files).

==================================================================================================

Below Topics of collections are rarely used or never used in Java for Testers : 

TreeMap : 

TreeMap is the class in collections.

It is different from HashMap in a way that it stores the key-value pair in ascending order of keys : 

package guviNewProject;

import java.util.TreeMap;

public class TreeMapUnderstanding {

	public static void main(String[] args) {
		methodForCreatingMyTreeMap();
	}
	
	public static void methodForCreatingMyTreeMap() {
		
		TreeMap<Integer, String> myTreeMap = new TreeMap<>();
		
		myTreeMap.put(3, "Banana");
		myTreeMap.put(1, "Apple");
		myTreeMap.put(2, "Mango");
		myTreeMap.put(5, "Orange");
		myTreeMap.put(4, "Grapes");
		
		System.out.println("My Tree Map values are :: " + myTreeMap);
		
	}

}

==================================================================================================


package guviNewProject;

import java.util.TreeMap;

public class TreeMapTaskSolving {

	public static void main(String[] args) {
		employeeNamesInAlphabeticalOrderUsingTreeMap();
	}
	
	public static void employeeNamesInAlphabeticalOrderUsingTreeMap() {
		
		TreeMap<String, Integer> myTreeMap = new TreeMap<String, Integer>();
		
		myTreeMap.put("Himanshu", 5000);
		myTreeMap.put("Amit", 3000);
		myTreeMap.put("Babitha", 2000);
		myTreeMap.put("Calankut", 4000);
		myTreeMap.put("Roopa", 1000);
		
		System.out.println("value in my tree map is :: " + myTreeMap);
		
	}

}

==================================================================================================

HashTable : 

It is like HashMap only but it is slow than HashMap.
It does not allow null keys or null values.
Like HashMap, it also not stores the ordering of elements.
It is thread-safe (HashMap is not thread safe).

==================================================================================================

package guviNewProject;

import java.util.Hashtable;

public class HashTableUnderstanding {

	public static void main(String[] args) {
		methodForCreatingHashtable();
	}

	public static void methodForCreatingHashtable() {
		
		Hashtable<Integer, String> myHashTable = new Hashtable<Integer, String>();
		
		myHashTable.put(1, "Apple");
		myHashTable.put(3, "Banana");
		
		System.out.println("my hash table is :: " + myHashTable);
		
	}

}

==================================================================================================

Vector : 

Vector is like resizeAble ArrayList. It looks like same as ArrayList but it is thread-safe.
It grows it size whenever we are adding the elements (same like List).
It is slower than ArrayList.

==================================================================================================

package guviNewProject;

import java.util.Vector;

public class VectorUnderstanding {

	public static void main(String[] args) {
		methodForCreatingVector();
	}
	
	public static void methodForCreatingVector() {
		
		Vector<String> myVector = new Vector<String>();
		
		myVector.add("Apple");
		myVector.add("Banana");
		
		System.out.println("values in my vector is :: " + myVector );
		
	}

}

==================================================================================================

package guviNewProject;

import java.util.Vector;

public class VectorUnderstanding {

	public static void main(String[] args) {
		methodForCreatingVector();
	}
	
	public static void methodForCreatingVector() {
		
		Vector<String> myVector = new Vector<String>();
		
		myVector.add("Apple");
		myVector.add("Banana");
		
		System.out.println("values in my vector is :: " + myVector );
		
		myVector.remove("Banana");
		System.out.println("values in my vector after deletion is :: " + myVector );
		
	}

}

==================================================================================================

Queue : 

Queue is also a Collection used to store elements in a FIFO Format.

FIFO : First In, First Out Order.

package guviNewProject;

import java.util.LinkedList;
import java.util.Queue;

public class QueueUnderstanding {

	public static void main(String[] args) {
		methodForCreatingQueue();
	}
	
	public static void methodForCreatingQueue() {
		
		Queue<String> myQueue = new LinkedList<String>();
		
		myQueue.add("Grapes");
		myQueue.add("Apple");
		myQueue.add("Banana");
		myQueue.add("Orange");
		
		System.out.println("My Queue is :: " + myQueue);
		
	}

}

==================================================================================================

File Handling is nothing but how we need to read and write Excel File, CSV file etc.

We will learn this tomorrow using APACHE POI.
And also we will learn how to create a Maven Project.

We learn what is Maven ? How a Maven Project is different from Java Project.

==================================================================================================



Assignment : 

Create a HashMap having 5 values like below : 

myMap<String, String> 

myMap.put("name","abcd");
myMap.put("Address","xyz");
myMap.put("FatherName","Ashish");
myMap.put("learnerName","Suresh");


Now, create a Set of String and Copy all the values (associated with keys) of HashMap created above.

Solution :

package guviNewProject;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class AssignmentForHashMapAndSet {

	public static void main(String[] args) {
		
		HashMap<String, String> myMap = new HashMap<String, String>();
		
		myMap.put("name","abcd");
		myMap.put("Address","xyz");
		myMap.put("FatherName","Ashish");
		myMap.put("learnerName","Suresh");
		myMap.put("learnerName2","Suresh");
		myMap.put("learnerName3", "Manish");
		
		Set<String> mySet = new HashSet<String>();
		
		mySet.add(myMap.get("name"));
		mySet.add(myMap.get("Address"));
		mySet.add(myMap.get("FatherName"));
		mySet.add(myMap.get("learnerName"));
		mySet.add(myMap.get("learnerName2"));
		mySet.add(myMap.get("learnerName3"));
		
		System.out.println("values in my Set is :: " + mySet);
		
	}

}

==================================================================================================

package guviNewProject;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class AssignmentForHashMapAndSet {

	public static void main(String[] args) {
		
		HashMap<String, String> myMap = new HashMap<String, String>();
		
		myMap.put("name","abcd");
		myMap.put("Address","xyz");
		myMap.put("FatherName","Ashish");
		myMap.put("learnerName","Suresh");
		myMap.put("learnerName2","Suresh");
		myMap.put("learnerName3", "Manish");
		
		Set<String> mySet = new HashSet<String>();
		
		for(String value : myMap.values()) {
			mySet.add(value);
		}
		
		System.out.println("values in my Set is :: " + mySet);
		
	}

}

==================================================================================================

How to get all the Keys from HashMap : 

package guviNewProject;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class AssignmentForHashMapAndSet {

	public static void main(String[] args) {
		
		HashMap<String, String> myMap = new HashMap<String, String>();
		
		myMap.put("name","abcd");
		myMap.put("Address","xyz");
		myMap.put("FatherName","Ashish");
		myMap.put("learnerName","Suresh");
		myMap.put("learnerName2","Suresh");
		myMap.put("learnerName3", "Manish");
		myMap.put("learnerName3", "Ashok");
		
		Set<String> mySet = new HashSet<String>();
		
		for(String key : myMap.keySet()) {
			mySet.add(key);
		}
		
		System.out.println("values in my Set is :: " + mySet);
		
	}

}


==================================================================================================

package guviNewProject;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class AssignmentForHashMapAndSet {

	public static void main(String[] args) {
		
		HashMap<String, String> myMap = new HashMap<String, String>();
		
		myMap.put("name","abcd");
		myMap.put("Address","xyz");
		myMap.put("FatherName","Ashish");
		myMap.put("learnerName","Suresh");
		myMap.put("learnerName2","Suresh");
		myMap.put("learnerName3", "Manish");
		myMap.put("learnerName3", "Ashok");
		
		Set<String> mySet = new HashSet<String>();
		
		for(String key : myMap.keySet()) {
			mySet.add(key);
			mySet.add(myMap.get(key));
		}
		
		System.out.println("values in my Set is :: " + mySet);
		
	}

}


==================================================================================================

Enhanced For Loop :

We call this as "for each" loop.

Syntax for enhanced for loop : 

for(dataType variableName : CollectionOfValuesFromAnotherVariable) {

// use this variableName 


}

package guviNewProject;

public class ForEachLoop_EnhancedForLoop {

	public static void main(String[] args) {

		
		int[] myArray = {10,54,32,89,76};

		for(int number : myArray ) { // 10
			System.out.println("value is :: " + number);
		}

	}

}


==================================================================================================

File Handling In Java : 

- When we talk about file handling as a tester in Java, it means we are generally talking about taking the values from Excel sheet.
- We need to read the data that is there in Excel File.
- We need to write the data in the excel file.
- In Case of File Handling in java, we dont call excel file as excel file but we call it as "workbook".

==================================================================================================

When we need to read and write the data in Excel file, we use Apache POI Libraries (apache poi jars/dependencies) for the same.

When we work on Java Project we use JAR (Java Archieved Format).
When we work on Maven Project, the life is simple, we dont need to manually download and add jar files in the project, rather 
we just add the dependencies for the same in POM.xml file.

==================================================================================================

In Maven , we dont need to manually download any Jar file.

We just need to add the dependency for that application/tool in our pom.xml and we are done.

<dependencies> 

<dependency>

</dependency>

<dependency>

</dependency>


</dependencies>

==================================================================================================

APACHE POI is a Java Library used to Reading, Writing the microsoft office files like Excel File, Word File, etc.

It supports the formats like : .xls, .xlsx for excel files.


opening tag means <>
closing tag means </>


<dependencies>

<dependency>

</dependency>

<dependency>

</dependency>

<dependency>

</dependency>

</dependencies>

==================================================================================================


Read Excel : 

package myNewMavenProjectForExcelFile;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelReadingInJava {

	public static void main(String[] args) throws IOException {

		// Give your Excel file path 
		
		FileInputStream myFile = new FileInputStream(new File("C:\\Users\\himanshu.kumar\\Desktop\\Excel For Guvi Evening Batch.xlsx"));
		
		// Now we need to create a workbook from this excel file : 
		
		Workbook myWorkBook = new XSSFWorkbook(myFile);
		
		// Get the first sheet of our workbook
		Sheet mySheet = myWorkBook.getSheetAt(1);
		
		// Take all the row one by one and give cell number and then get the value
		
		for(Row row : mySheet) {
			
			for(Cell cell : row) {
				switch(cell.getCellType()) {
				case STRING : 
					System.out.println("Cell value is :: " + cell.getStringCellValue());
					break;
				case NUMERIC : 
						System.out.println("cell value is :: " + cell.getNumericCellValue());
						break;
				case BOOLEAN :
					System.out.println("cell value is :: " + cell.getBooleanCellValue());
					break;
				}
			}
			
		}
		
	}

}





==================================================================================================

Write in Excel : 

package myNewMavenProjectForExcelFile;

import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ExcelWritingInJava {

	public static void main(String[] args) throws IOException {

		// Create a new workbook (Excel file)
		XSSFWorkbook myWorkBook = new XSSFWorkbook();
		
		XSSFSheet mySheet = myWorkBook.createSheet("Shee1");
		
		XSSFRow firstRow = mySheet.createRow(0);
		
		firstRow.createCell(0).setCellValue("FirstName");
		firstRow.createCell(1).setCellValue("LastName");
		firstRow.createCell(2).setCellValue("FatherName");
		
		// Now we need to write this workbook to a file
		
		FileOutputStream fileOut = new FileOutputStream("myExcelFile2.xlsx");
		
		myWorkBook.write(fileOut);
		
		System.out.println("Excel file has been created successfully");
		
	}

}

==================================================================================================


Excel Assignment :

package myNewMavenProjectForExcelFile;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class AssignmentForExcel {

	static List<String> allValues = new ArrayList<String>();

	public static void main(String[] args) throws Exception {
		readExcel();
		writeExcel();
	}

	public static void readExcel() throws Exception {
		// Give your Excel file path 
		FileInputStream myFile = new FileInputStream(new File("C:\\Users\\himanshu.kumar\\Desktop\\abcd.xlsx"));

		// Now we need to create a workbook from this excel file : 
		Workbook myWorkBook = new XSSFWorkbook(myFile);

		// Get the first sheet of our workbook
		Sheet mySheet = myWorkBook.getSheetAt(0);

		// Take all the row one by one and give cell number and then get the value
		for(Row row : mySheet) {
			for(Cell cell : row) {
				switch(cell.getCellType()) {
				case STRING : 
					System.out.println("Cell value is :: " + cell.getStringCellValue());
					allValues.add(cell.getStringCellValue());
					break;
				case NUMERIC : 
					System.out.println("cell value is :: " + cell.getNumericCellValue());
					allValues.add(String.valueOf(cell.getNumericCellValue()));
					break;
				case BOOLEAN :
					System.out.println("cell value is :: " + cell.getBooleanCellValue());
					allValues.add(String.valueOf(cell.getBooleanCellValue()));
					break;
				}
			}
		}
	}

	public static void writeExcel() throws Exception{

		// Create a new workbook (Excel file)
		XSSFWorkbook myWorkBook = new XSSFWorkbook();

		XSSFSheet mySheet = myWorkBook.createSheet("Sheet1");

		XSSFRow firstRow = mySheet.createRow(0);

		firstRow.createCell(0).setCellValue(allValues.get(0));
		firstRow.createCell(1).setCellValue(allValues.get(1));
		firstRow.createCell(2).setCellValue(allValues.get(2));

		// Now we need to write this workbook to a file

		FileOutputStream fileOut = new FileOutputStream("xyz.xlsx");

		myWorkBook.write(fileOut);

		System.out.println("Excel file has been created successfully");

	}

}



==================================================================================================

Java Revision : 

int : 

package guviNewProject;

public class JavaRevision_ArrayUnderstanding {

	public static void main(String[] args) {
		methodToUnderstandArray();
	}	
	
	public static void methodToUnderstandArray() {
		
		int[] myArray = {12,15,105,150,215}; // It is mandatory to give the size of an array whenever we are declaring it.
		
		for(int count = 0; count<myArray.length;count++) {
		System.out.println(myArray[count]); 
		}
		
	}

}


float : 

package guviNewProject;

public class JavaRevision_FloatUnderstanding {

	public static void main(String[] args) {
		areaOfCirle(5.2f);
	}
	
	public static void areaOfCirle(float radius) {
		float area = 3.14f * radius * radius;
		System.out.println("area of circle is :: " + area);
	}

}


String : 

package guviNewProject;

public class JavaRevision_StringUnderstanding {

	public static void main(String[] args) {
		methodToUnderstandWhyStringIsImmutableInJava();
	}
	
	public static void methodToUnderstandWhyStringIsImmutableInJava() {
		String name = "Himanshu";
		name = name.concat("Radhika");
		System.out.println("name after concatination is :: " + name);  // String is immutable in Java
		
		StringBuffer name2 = new StringBuffer();
		name2.append("Gopi");
		name2.append("Krishna");
		System.out.println("name2 after concatination is :: " + name2); // StringBuffer is mutable in Java
		
	}

}


Array : 

package guviNewProject;

public class JavaRevision_ArrayUnderstanding {

	public static void main(String[] args) {
		methodToUnderstandArray();
	}	
	
	public static void methodToUnderstandArray() {
		
		int[] myArray = {12,15,105,150,215}; // It is mandatory to give the size of an array whenever we are declaring it.
		
		for(int count = 0; count<myArray.length;count++) {
		System.out.println(myArray[count]); 
		}
		
	}

}


boolean : 

package guviNewProject;

public class JavaRevision_booleanUnderstanding {

	public static void main(String[] args) {
		compareAge(50);
	}
	
	public static void compareAge(int age) {
		boolean isAdult = age>=18;
		
		if(isAdult) {
			System.out.println("you are an adult");
		}
		else {
			System.out.println("You are not adult");
		}
		
	}

}


List : 

package guviNewProject;

import java.util.ArrayList;
import java.util.List;

public class JavaRevision_ArrayList {

	public static void main(String[] args) {
		myList();
	}
	
	public static void myList() {
		
		List<Float> myList = new ArrayList<Float>();
		
		myList.add(25.1f);
		myList.add(87.69f);
		myList.add(87.69f);
		myList.add(11.11f);
		System.out.println("my list is :: " + myList);
		
	}

}


HashMap (Map) : 

package guviNewProject;

import java.util.HashMap;

public class JavaRevision_HashMapUnderstanding {
	
	public static void main(String[] args) {
		methodToCreateMyHashMap();
	}
	
	public static void methodToCreateMyHashMap() {
		
		HashMap<String, Integer> myHashMap = new HashMap<String, Integer>();
		
		myHashMap.put("HimanshuEmpCode", 23);
		myHashMap.put("AmruthaEmpCode", 451);
		System.out.println("my hashmap is :: " + myHashMap);
		
	}

}


package guviNewProject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class JavaRevision_HashMapUnderstanding {
	
	public static void main(String[] args) {
		methodToCreateMyHashMap();
	}
	
	public static void methodToCreateMyHashMap() {
		
		List<String> myStringList  = new ArrayList<String>(); myStringList.add("Happy"); myStringList.add("Suresh");
		List<Integer> myIntList  = new ArrayList<Integer>(); myIntList.add(25); myIntList.add(89);
		
		HashMap<String, Integer> myHashMap = new HashMap<>();
		
		myHashMap.put(myStringList.get(0), myIntList.get(0));
		myHashMap.put(myStringList.get(1), myIntList.get(1));
		
		System.out.println("My HashMap after values insertions from lists is :: " + myHashMap);
		
		
	}

}


HashSet (Set) : 

package guviNewProject;

import java.util.HashSet;
import java.util.Set;

public class JavaRevision_HashSetUnderstanding {

	public static void main(String[] args) {
		methodForHashSetUnderstanding();
	}
	
	public static void methodForHashSetUnderstanding() {
		Set<String> myHashSet = new HashSet<String>();
		myHashSet.add("happy");
		myHashSet.add("honey");
		myHashSet.add("happy");
		myHashSet.add("happy");
		System.out.println("my hash set is :: " + myHashSet); // Set does not store duplicate values
	}

}


Inheritance : 

package guviNewProject;

public class JavaRevisionChildClass extends JavaRevisionParentClass{
	
	public static void main(String[] args) {
		
	m1InChildClass();
	m1InParentClass();
	m1InGrandParentClass();
		
	}

	public static void m1InChildClass() {
		System.out.println("I am m1 of Child class");
	}

}


package guviNewProject;

public class JavaRevisionParentClass extends JavaRevisionGrandParentClass {
	
	public static void main(String[] args) {
		m1InParentClass();
		m1InGrandParentClass();
	}

	public static void m1InParentClass() {
		System.out.println("I am m1 of parent class");
	}
	
	
}



package guviNewProject;

public class JavaRevisionGrandParentClass {
	
	public static void main(String[] args) {
		m1InGrandParentClass();
	}

	public static void m1InGrandParentClass() {
		System.out.println("I am m1 of grandparent class");
	}

}


Encapsulation : 

package guviNewProject;

public class JavaRevision_EncapsulationClassHavingGetterSetter {
	
	private int sum=0;
	
	public void setSum(int sum) {
		this.sum = sum;
	}
	
	public int getSum() {
		System.out.println("sum is :: " + sum);
		return sum;
	}


}



package guviNewProject;

public class JavaRevision_EncapsulationClass2 {

	public static void main(String[] args) {
		
		JavaRevision_EncapsulationClassHavingGetterSetter myObj = new JavaRevision_EncapsulationClassHavingGetterSetter();
		
		int a = 10;
		int b = 20;
		int c = a + b;
		
		myObj.setSum(c);
		myObj.getSum();

	}

}

Polymorpshism :

Poly - many
phism - forms

it means we are going to have same methods in different classes/same class but there forms are different.

There are 2 types : 
Overloading 
Overridding 

Overloading : 
We are going to have same method name but : 
1) with diff number parameter or
2) same number of parameter but with different data type
3) same number of parameter, same data type but with different order


package guviNewProject;

public class JavaRevision_Overloading {

	public static void main(String[] args) {
		m1(52, 69);
	}

	public static void m1(int a) {
		System.out.println("I am m1 method with one parameter");
	}

	public static void m1(int a, int b) {
		System.out.println("I am m1 method with two parameter");
	}

}


======================================================================================================

package guviNewProject;

public class JavaRevision_Overloading {

	public static void main(String[] args) {
		m1(14, "Hemavath");
	}

	public static void m1(int a, String b) {
		System.out.println("I am m1 method with two parameter int, String");
	}

	public static void m1(int a, int b) {
		System.out.println("I am m1 method with two parameter int, int");
	}

}


===================================================================================================


package guviNewProject;

public class JavaRevision_Overloading {

	public static void main(String[] args) {
		m1("Himanshu",54);
	}

	public static void m1(int a, String b) {
		System.out.println("I am m1 method with two parameter int, String");
	}

	public static void m1(String a, int b) {
		System.out.println("I am m1 method with two parameter String, int");
	}

}

===================================================================================================

Overridding : 

package guviNewProject;

public class School extends University{

	public static void main(String[] args) {

	}
	
	public void m1() {
		System.out.println("i am m1 of school");
	}

}


package guviNewProject;

public class College extends University {

	public static void main(String[] args) {

	}

	public void m1() {
		System.out.println("i am m1 of college");
	}

	
}



package guviNewProject;

public class University {


	public void m1() {
		
	}
	
}



package guviNewProject;

public class CallingClassForOverridding {

	public static void main(String[] args) {
		
		University myObj =  new School();
		
		myObj.m1();
		
		myObj = new College();
		
		myObj.m1();
		
		
	}

}


===================================================================================================

Abstraction : 

package guviNewProject;

public class Class2ForAbstractionRevision extends JavaRevisionAbstraction{

	public static void main(String[] args) {
		Class2ForAbstractionRevision myObj = new Class2ForAbstractionRevision();
		myObj.m1();
		myObj.m2();
	}

	public void m1() {
		System.out.println("I am m1 method");
	}

	public void m2() {
		System.out.println("I am m2 method");
	}

}


===================================================================================================

Selenium : 

What is Selenium ?

Selenium is an automation testing tool which is used to automate the Web Application.

What is Web application ?

Any application that we can open in browser is the web application.

We have 4 types of selenium : 

1) Selenium IDE (Which is never used).
2) Selenium RC (which is never used).
3) Selenium WebDriver (This is always used).
4) Selenium Grid (Very rarely used for parallel execution of scripts).

Selenium IDE : 

This is just a recording tool.
play and record feature is there.
No code we can write in Selenium IDE.
In Selenium IDE, no or very rare customization is possible.
No logics can be written in Selenium IDE.
Selenium IDE is a firefox extension.

Selenium RC : 
- It does not have any IDE (no user interface is there).
- It is never used.
- It is very slow in comparision to Selenium WebDriver.

Selenium WebDriver : 
- This is used to automate the web applications.
- This is very popular tool.
- When we say Selelnium, it means we are talking about Selenium WebDriver.
- This is a free tool.
- This is an open source tool.
- Selenium is supported by so many languages like Selenium with Java, Selenium with Python, Selenium with C#, Selenium with groovy etc.
- This does not have any IDE (There is no user interface of Selenium WebDriver).

Selenium Grid : 
- This is very rarely used.
- This is used to execute the same script on multiple browser at the same time.
- This selenium grid is used for parallel execution of our code.

==============================================================================================

What is the prerequisite if need to work with Selenium with Java :

1) Download and install Java.
2) Take the selenium Java maven dependency and add in the POM.xml.
3) Take the selenium WebDriverManager maven dependency and add in the POM.xml

What is Selenium Java Dependency : 
This is having the code for selenium methods etc.

What is Selenium WebDriverManager :
This is used to manage the Browsers Drivers.

WebDriverManager.chromedriver().setup();

package SeleniumFromScratch;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class OpenBrowser {

	public static void main(String[] args) {
		
		WebDriverManager.chromedriver().setup();
		
		WebDriver driver = new ChromeDriver();
		
		// To open the url : we simply use the get method
		
		driver.get("https://www.google.com");
		
	}

}


package SeleniumFromScratch;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class OpenBrowser {

	public static void main(String[] args) {
		
		WebDriverManager.chromedriver().setup();
		
		WebDriver driver = new ChromeDriver();
		
		// To open the url : we simply use the get method
		
		driver.get("https://www.google.com");
		
		// To maximize the window - we simply use : driver.manage.window.maximize
		
		driver.manage().window().maximize();
		
		// To minimize the window - we simply use : driver.manage.window.minimize
		
		driver.manage().window().minimize();
		
	}

}

====================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class OpenBrowser {

	public static void main(String[] args) {
		
		WebDriverManager.chromedriver().setup();
		
		WebDriver driver = new ChromeDriver();
		
		// To open the url : we simply use the get method
		
		driver.get("https://www.google.com");
		
		// To maximize the window - we simply use : driver.manage.window.maximize
		
		driver.manage().window().maximize();
		
		// To minimize the window - we simply use : driver.manage.window.minimize
		
		driver.manage().window().minimize();
		
		// To navigate to any new url : 
		
		driver.navigate().to("https://www.facebook.com");
		
	}

}


==========================================================================================================


Home work ?

question 1 : How my script is able to open facebook.com when the browser is minimized.

question 2 : what is the difference between driver.get() and driver.navigate.to();


==========================================================================================================

Assignment : 

Write a code to (make sure to do it with Maven Project) :

- open the chrome browser.
- open www.google.com
- maximize the window
- open mozilla browser.
- open www.google.com
- maximize the window.
- minimize the window.

==========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class SeleniumAssignment1 {

	public static void main(String[] args) {
		myMethodForAssignment();
	}
	
	public static void myMethodForAssignment() {
		WebDriverManager.chromedriver().setup(); // It will download the chrome driver in your system.
		WebDriverManager.firefoxdriver().setup(); // It will download firefox driver in your system.
		
		WebDriver driver = new ChromeDriver();  // This will open chrome driver
		driver.get("https://www.google.com");
		driver.manage().window().maximize();
		driver = new FirefoxDriver(); // This line will open firefox driver
		driver.get("https://www.google.com");
		driver.manage().window().maximize();
		driver.manage().window().minimize();
		
	}

}

==========================================================================================================


package SeleniumFromScratch;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class SeleniumAssignment1 {

	public static void main(String[] args) {
		myMethodForAssignment();
	}
	
	public static void myMethodForAssignment() {
		WebDriverManager.chromedriver().setup(); // It will download the chrome driver in your system.
		WebDriverManager.firefoxdriver().setup(); // It will download firefox driver in your system.
		
		WebDriver driver = new ChromeDriver();  // This will open chrome driver
		commonCode(driver);
		driver = new FirefoxDriver(); // This line will open firefox driver
		commonCode(driver);
		driver.manage().window().minimize();
		
	}
	
	public static void commonCode(WebDriver driver) {
		driver.get("https://www.google.com");
		driver.manage().window().maximize();
	}

}

==========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class SeleniumAssignment1 {
	
	public static String browserName;

	public static void main(String[] args) {
		myMethodForAssignment();
	}
	
	public static void myMethodForAssignment() {
		WebDriverManager.chromedriver().setup(); // It will download the chrome driver in your system.
		WebDriverManager.firefoxdriver().setup(); // It will download firefox driver in your system.
		
		WebDriver driver = new ChromeDriver();  // This will open chrome driver
		commonCode(driver, "chrome");
		driver = new FirefoxDriver(); // This line will open firefox driver
		commonCode(driver, "firefox");
		
	}
	
	public static void commonCode(WebDriver driver, String browserName) {
		driver.get("https://www.google.com");
		driver.manage().window().maximize();
		if (browserName.equalsIgnoreCase("firefox")) {
			driver.manage().window().minimize();
		}
	}

}

==========================================================================================================

Hemavathy - you need to follow 2 steps to resolve the issue : 

1) Download the Mozilla Firefox Driver for windows. (Take the driver location)
2) System.SetProperty(webdriver.firefox.driver,"<path of driver that you have downloaded>");

Note : Make sure to download the firefox driver close to your local firefox browser version.

==========================================================================================================

If you want to learn selenium and you are not having the basic knowledge of HTML, then its very hard for anyone of us to learn selenium.


How to learn HTML ?

Dont worry I will teach you.

How much time it will take to learn basics of HTML ? 

1 week
1 day
2-3 days
1 hour


Maximum Half an Hour.....

Now step by step we will learn HTML : 

TWO main things are there in HTML : 

1) opening tag
2) closing tag

<html>

</html>


Now, I am going to a fresh new HTML Page for you. HTML : Hyper Text MarkUp Language. It is used to show the content on any website.

p tag is used to write a paragraph

b tag is used to write something in bold letters.

h1 is used to give the Top Heading on the page.

button tag is used to create a button

br tag is used to give a line break (and there is no need to use the closing bracket for br tag).

a tag is used to create a link.

attributeName and attribute value and we always give attribute name and attribute value in the opening tag 
linkText - This is the Text that is written in between the opening tag and closing tag

div tag, tr tag, td tag, table tag, img, input tag

==========================================================================================================

Important Things for Java Interview : 

4 OOPS concepts
5 STRING
6 Array 
7 HashMap 
8 List
Programs related to things like : 
Reverse a STRING
Pattern Printing
How to find duplicate number in an array
How to remove duplicate from array
How to find minimum and maximum number in an array.
Thoery of constructors.

==========================================================================================================

Sample HTML File : 

<html>
<body>

<h1>Guvi Details : (this is an example of h1 heading) </h1>


<h2>Guvi Details : (this is an example of h2 heading) </h2>



<p>
<b>This is a new html for Guvi Evening Batch Learners</b>
</p>

<button>Click Here to see more details</button>

<br>
<br>

<a href="https://www.facebook.com" style="color: green"; >Click Here to open facebook for learners</a>

<br>
<br>

<input> Enter Your Name Here </input>
<br> <br>



<table border="1">

<tr>
<th>FirstName</th>
<th>LastName</th>
<th>Location</th>
<th>EmpID</th>
</tr>

<tr>
<td>Himanshu</td>
<td>Gupta</td>
<td>Delhi</td>
<td>1123</td>
</tr>

<tr>
<td>Roopa</td>
<td>NA</td>
<td>Mumbai</td>
<td>1125</td>
</tr>


<tr>
<td>Saran</td>
<td>NA</td>
<td>Pune</td>
<td>1154</td>
</tr>

<tr>
<td>Hemavathy</td>
<td>NA</td>
<td>Noida</td>
<td>5214</td>
</tr>

<br> <br>

</table>

<br> <br>

<img src="https://media.istockphoto.com/id/1796374503/photo/the-lion-king.jpg?s=612x612&w=0&k=20&c=wDcyZj9yM1-7cCahtCn1SWnu_DGJsOHzlqWt6SSllzU=">
This is my image
</img>


</body>
</html>

==========================================================================================================

What is Automation Testing?

Automation Testing is used to automate the test cases that we were executing manually.
By using automation, there is no need to do the manual intervention.
Once the automation script is ready we can execute it and get the automation reports of pass and failures, it means 
how many test cases have been executed, how many are pass and how many are fail.

==========================================================================================================

Different Automation Tools :

1) 
Selelnium (selenium webdriver) is an automation tool to automation web application.
Selenium is a free tool.
Selenium is an open source tool.
Selenium cant automation mobile website, selenium cant automate desktop application, selenium cant automate mobile apps.
Selenium supports so many languages like Java, Python, JavaScript, Groovy, C# etc.

2) 
QTP - New name of QTP is UFT.
This is a paid tool.
UFT is used to automate desktop application.
UFT cant automate mobile application, mobile apps etc.
There is no language used like Java, JavaScript, Python but it works on VB scripting.

3) Rest Assured / Karate : 
These tools are used to automation API Testing.
Karate is also used for UI Automation (Web Application Automation).

4) Playwright / Cypress / Protractor  : 
All these tools are used to automation web application and all are very widely used these days.
Most Popular tool amongst these 3 tools is playwright.

We have another tools like TOSCA etc.

==========================================================================================================

Criteria for Automation Test Cases :

Automation should only be done when our application/build/product is stable :
We should do the automation only when our web application is stable, otherwise if the application is changed again and again, 
you need to change your automation script also.

build number 2.3.1  -> It has the code for my application.
build number 2.3.2 -> It also has the code for my application but its an updated build with new changes.

When to go for Automation? 

Automation should be done only when we need to execute our test cases multiple times.
Like Regression Suite, Sanity suite etc.

==========================================================================================================

Advantages of Automation :

- We can execute the same set of test cases any number of times without any manual intervention once the automation script is ready.
- Coverage of test cases can be enhanced while we are doing automation testing.
For example : if we take the example of a text box that takes the values from 18 to 36,
by automation we can test it for all the values from 17 to 37 but with manual testing to save time we test it for some specific values 
only.
- Automation Testing is faster than manual testing.
- Automation Testing results more accurate and reliable than manual testing.

package SeleniumFromScratch;

public class CheckAgeProgram {

	public static void main(String[] args) {
			checkAge(20);
			checkAge(10);
			checkAge(15);
			checkAge(36);
			checkAge(37);
	}
	
	public static void checkAge(int age) {
		if(age>=18 && age<=36) {
			System.out.println( age + " -> Its a valid age");
		}
		else {
			System.out.println(age + " -> Its an invalid age");
		}
	}

}

==========================================================================================================

Difference between Manual Testing and Automation Testing :

- Automation Testing is done only when the build is stable but manual testing can be done in any stages of the build.
- Automation Testing is fast where in manual testing is slow.
- There are cases when automation testing is possible but manual testing is possible like Games Testing.
- Automation Testing is one time effort when build is stable but manual testing always takes time because we need to execute the test cases manually.

==========================================================================================================

Selenium Locators : 


Manual Testing Steps : 

Requirement : I need to type temparature in Delhi in Google search and need to click enter ?
How will I do it ?

Step1 : Open Browser (Google Chrome or any other).
Step2 : Open www.google.com
Step3 : Type temparature in delhi in search box
Step4 : Press Enter Button.

==========================================================================================================

I need to do the same requirement but now with automation :

will the steps be same ?

Step1 : Open Browser (Google Chrome or any other).
Step2 : Open www.google.com
Step3 : Locate the search box.
Step4 : Type temparature in delhi in search box
Step5 : Press Enter Button.

// Webpage means web application : Application that we open in browser : www.google.com, www.facebook.com, www.myntra.com etc etc.
// WebElement : Any element that is getting displayed on the webpage is the webelement.

==========================================================================================================

We have 8 selenium locators to locate a webelement on the webpage.
We have 8 selenium locators to find the webelement on the webpage.

1) id 
2) linkText
3) partialLinkText
4) a tag
5) name
6) ClassName
7) CssSelector
8) XPath : Absolute XPath and Relative XPath.

first selenium locator that we are going to cover is : "id"

How to inspect an element :
Right click on the webelement and select inspect element , or press F12 (in some laptop press fn + F12).

- Simply inspect the element and check that if this element is having id attribute or not.
- id is always unique (no 2 elements on a webpage can have same id value).
- id can be dynamic means it can be changed whenever we are refreshing the page again. or we are opening the website again.
(in very few cases the id value is dynamic and when its dynamic we should not use it else our automation script will fail).

Interview question is : 
in which case, we should not use ID locator ?

Answer : when its dynamic, we should not use it.

Selenium Locators are used to find the element and then to do the action on it.

ID Locator : 

Syntax : 
driver.findElement(By.id("")); // in double quotes we will be passing the value of id attribute

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class AmazonSearchBoxById {

	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.amazon.in/");
		waitForFixTime(10000);
		driver.findElement(By.id("twotabsearchtextbox")).sendKeys("Nike Shoes for men for sport purpose");
		driver.findElement(By.id("nav-search-submit-button")).click();
		
	}
	
	public static void waitForFixTime(int time) {
		try { 
		Thread.sleep(time); 
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

}


==========================================================================================================

Difference between driver.get and driver.navigate.To :

Difference 1 : 

driver.get is waiting for all the complete page to load. Till the page loads completely, the next line of code will not be executed.
driver.navagate.To : It does not wait for the complete page to load and it will execute the next line of code.

Difference 2 : 
when we use driver.get, then we can not navigate back and forth.
when we use driver.navagate.To, then we can navigate back and we can navigate forth.
driver.navigate().back();
driver.navigate().forward();

Difference 3 : 
when we use driver.get, we cant use driver.refresh.
when we use driver.navagate.to then we can use driver.navigate.refresh
driver.navigate().refresh();


==========================================================================================================

Roopa's Question : 

to close the program driver.close() is used or driver.quit() is used

To close the program, we dont use anything.

To close the current instance of driver - we use driver.close();
To close the all instances of driver - we use driver.quit();

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class DifferenceBetweenDriverCloseAndDriverQuit {

	public static void main(String[] args) throws InterruptedException {
		
		WebDriverManager.chromedriver().setup();
		
		WebDriver driver = new ChromeDriver();
		
		driver.get("https://rahulshettyacademy.com/AutomationPractice/");
		waitForFixTime(2000);
		driver.findElement(By.id("openwindow")).click();
//		driver.close(); // It will only close the current instance of browser
		driver.quit(); // It will close all the browsers that are associated with this driver
	}
	
	public static void waitForFixTime(int time) throws InterruptedException {
		Thread.sleep(time);
	}

}


==========================================================================================================

Assignment : 

Take any 5 elements on any website and try to click on those elements by using id attribute (reference code below) : 

Example : 
driver.get(); // in this put the url of the website
driver.findElement(By.id("")).click(); // put the id value in this 

driver.get(); // in this put the url of the website
driver.findElement(By.id("")).click(); // put the id value in this 

==========================================================================================================

Selenium Locator : ID 

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_id_Locator {
	
	public static WebDriver driver;
	
	public static void main(String[] args) {
		setUpChrome();
		clickFirstElement();
		clickSecondElement();
	}
	
	public static void setUpChrome() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
	}
	
	public static void clickFirstElement() {
		driver.get("https://www.google.com/");
		driver.findElement(By.id("APjFqb")).sendKeys("Mumbai Weater");
	}
	
	public static void clickSecondElement() {
		driver.get("https://www.naukri.com/");
		driver.findElement(By.id("login_Layer")).click();
	}

}


====================================================================================================

Whenever we need to click on any element we use the method as click();
Whenever we need to enter something in a text box / input box - then we use the method as sendKeys();

====================================================================================================

Selenium Locator : ClassName : 

className = <ClassNameValue>

Syntax : 
driver.findElement(By.classname("")); // in double quotes we will be passing the value of class attribute

Code : 

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_class_locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		understandingClassSeleniumLocator();
	}
	
	public static void understandingClassSeleniumLocator() {
		driver.get("https://magento.softwaretestingboard.com/");
		driver.findElement(By.className("input-text")).sendKeys("Yoga");
	}

}



========================================================================================================

Note : It is recommended that whenever we have spaces in the className value, then we should not use the className value.

========================================================================================================


package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_class_locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		understandingClassSeleniumLocator();
	}
	
	public static void understandingClassSeleniumLocator() {
		driver.get("https://magento.softwaretestingboard.com/");
		driver.findElement(By.className("input-text")).sendKeys("Yoga");
	}
	
}


========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_class_locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		clickGmailButtonByUsingClassAttribute();
		
	}
	
	public static void clickGmailButtonByUsingClassAttribute() {
		driver.get("https://www.google.com/");
		driver.findElement(By.className("gb_X")).click();
	}

}


========================================================================================================

Selenium Locator - Name : 

name = <nameValue> 

Syntax : 

driver.findElement(By.name(""); // in double quotes we will be passing the value of name attribute

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_name_Locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		setUpChrome();
		nameLocatorUnderstanding();
		idLocatorUnderstanding();
	}
	
	public static void setUpChrome() {
		WebDriverManager.chromedriver().setup(); // it will download the chrome driver in your machine
		driver = new ChromeDriver(); // this will open the new chrome browser
		driver.manage().window().maximize(); // this will maximize the chrome browser
	}
	
	public static void nameLocatorUnderstanding() {
		driver.get("https://ecommerce-playground.lambdatest.io/index.php?route=account/login"); // this will open this website
		driver.findElement(By.name("email")).sendKeys("himanshutester01@gmail.com"); // this will enter email address in the email text box
	}
	
	public static void idLocatorUnderstanding() {
		waitForFixTime(4000);
		driver.findElement(By.id("input-email")).clear(); // this will clear the text box
		waitForFixTime(4000);
		driver.findElement(By.id("input-email")).sendKeys("himanshuNewEmailID@gmail.com"); // this will again enter the new email address in the email text box
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}


========================================================================================================

Alternative Way : 

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_name_Locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		setUpChrome();
		nameLocatorUnderstanding();
		idLocatorUnderstanding();
	}
	
	public static void setUpChrome() {
		WebDriverManager.chromedriver().setup(); // it will download the chrome driver in your machine
		driver = new ChromeDriver(); // this will open the new chrome browser
		driver.manage().window().maximize(); // this will maximize the chrome browser
	}
	
	public static void nameLocatorUnderstanding() {
		driver.get("https://ecommerce-playground.lambdatest.io/index.php?route=account/login"); // this will open this website
		driver.findElement(By.name("email")).sendKeys("himanshutester01@gmail.com"); // this will enter email address in the email text box
	}
	
	public static void idLocatorUnderstanding() {
		waitForFixTime(4000);
		WebElement myEmailInputBox =  driver.findElement(By.id("input-email"));
		myEmailInputBox.clear();
		myEmailInputBox.sendKeys("himanshuNewEmail@gmail.com");
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}


========================================================================================================

Selenium Locator - LinkText : 

Any text that is written between the opening tag and closing tag of anchor tag elements is called linkText.

Syntax : 

driver.findElement(By.linkText("")); // in double quotes we will be passing the value of link text

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_linkText_Locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		setUpChrome();
		method1ToUnderstandLinkTextLocator();
		method2ToUnderstandLinkTextLocator();
	}
	
	public static void setUpChrome() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
	}
	
	public static void method1ToUnderstandLinkTextLocator() {
		driver.get("https://www.google.com/");
		driver.findElement(By.linkText("Gmail")).click();
	}
	
	public static void method2ToUnderstandLinkTextLocator() {
		driver.get("https://www.google.com/");
		driver.findElement(By.linkText("Images")).click();
	}

}


========================================================================================================

Selenium Locator - partialLinkText : 

we can use any partial value of link Text : 

Gmail : 

Gmai
mail
ail
Gma
mai



package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_partialLinkText_Locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		setUpChrome();
		method1ForUnderstandingPartialLinkTextLocator();
	}
	
	public static void setUpChrome() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
	}
	
	public static void method1ForUnderstandingPartialLinkTextLocator() {
		driver.get("https://www.myntra.com/");
		WebElement myElement = driver.findElement(By.partialLinkText("Kid")); // Kids is full text, but i am going to use "Kid"
		String text_of_my_element = myElement.getText();
		System.out.println("Text of my element :: " + text_of_my_element );
		myElement.click();
		
	}

}


========================================================================================================

Selenium Locator - tagName 

syntax : 

driver.findElement(By.tagName(""); // in double quotes we need to pass the tagName (not its value) 

package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_tagName_Locator {
	
	public static WebDriver driver;

	public static void main(String[] args) {
		setUpChrome();
		methodToUnderstandTagNameLocator();
	}
	
	public static void setUpChrome() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
	}
	
	public static void methodToUnderstandTagNameLocator() {
		driver.get("https://www.google.com");
       List<WebElement>	myElements = 	driver.findElements(By.tagName("a"));
       int size = myElements.size(); 
       System.out.println("Number of Elements on the page which are having a tag is :: " + size);
	}

}

========================================================================================================

package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_tagName_Locator {
	
	public static WebDriver driver;

	public static void main(String[] args) {
		setUpChrome();
		methodToUnderstandTagNameLocator();
	}
	
	public static void setUpChrome() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
	}
	
	public static void methodToUnderstandTagNameLocator() {
		driver.get("https://www.google.com");
       List<WebElement>	myElements = 	driver.findElements(By.tagName("script"));
       int size = myElements.size(); 
       System.out.println("Number of Elements on the page which are having script tag is :: " + size);
	}

}


========================================================================================================


Very Important Interview Question : 

1) What is the difference between driver.findElement and driver.findElements
Answer : whenever we need to work on one element, we use findElement.
findElement only stores one webElement.
whenever we need to work on more than one element, we use findElements.
findElements stores the list of Webelements.

2) What is the return type of findElement and what is the return type of findElements. 
return type of findElement -> WebElemet
return type of findElements -> WebElements


========================================================================================================

Selenium Locator : cssSelector 

syntax : 
driver.findElement(By.cssSelector("")); // if we have id then use it with # // if we have className then use it with .

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_CssSelector_Locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.google.com");
		driver.findElement(By.cssSelector("#APjFqb")).sendKeys("Delhi Famous Places to visit"); // we have used the value of id locator
		

	}
	
}

========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class Selenium_CssSelector_Locator {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.google.com");
		// if we want to use the value of className attribute then we can use . (dot)
		driver.findElement(By.cssSelector(".gLFyf")).sendKeys("Delhi Famous Places to visit"); 
		

	}
	
	

}


========================================================================================================

Selenium Locators Covered : 

id
name
ClassName
linkText
partialLinkText
tagName
cssSelector

Pending :

Xpath : absolute Xpath and Relative Xpath - we will cover tomorrow.

========================================================================================================

Selenium Locator - Xpath :

2 types of Xpath : 

1) Absolute Xpath 
2) Relative Xpath

Absolute Xpath is never recommened to use.

What is absolute Xpath : Xpath which traveres the complete DOM from top till that element.

/html/body/div[1]/div[3]/form/div[1]/div[1]/div[1]/div[1]/div[2]/textarea

But now, if there is any addition or deletion of HTML tags between this absolute Xpath, your Xpath will fail to locate the element.

/html/body/div/div/div
/html/body/div[2]/div/div
/html/body/div[2]/div/div/div
/html/body/div[2]/div/div/div/div/div/div/div/div

Relative Xpath : 

What is relative Xpath : Xpath which does not traverse the complete DOM, rather its uses the elements near by properties to locate the element (like attribute, values, parent child hierarcy, sibling etc).


.//div[contains(text(),'Student')]

========================================================================================================

How to write the relative Xpath : 

There are total of 20-25 ways how to write the relative XPath.
If you know how to write relative Xpath, you not need to use any of the other locator like "id", "className" , "name", "linkText" etc. etc.


========================================================================================================

1st way of writing Xpath : 

syntax : 

//tagName[@attributeName='attributeValue']

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class WaysToWriteXpath {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		openChomeWithUrl("https://www.wikipedia.org/");
		firstWayToWriteXpath();
	}
	
	public static void firstWayToWriteXpath() {
		//tagName[@attributeName='attributeValue']
//		driver.findElement(By.xpath("//input[@name='search']")).sendKeys("India");
//		driver.findElement(By.xpath("//input[@id='searchInput']")).sendKeys("India");
		driver.findElement(By.xpath("//input[@type='search']")).sendKeys("India");
	}
	
	public static void openChomeWithUrl(String url) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(url);
	}

}

========================================================================================================


2nd way of writing Xpath : 

syntax : //tagName - to identify all the elements with that specific tag 


package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class WaysToWriteXpath {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		openChomeWithUrl("https://www.wikipedia.org/");
		secondWayToWriteXpath();
	}
	
	
	public static void secondWayToWriteXpath() {
		//tagName
		int num = driver.findElements(By.xpath("//a")).size();
		System.out.println("total links on page are :: " + num);
	}
	
	public static void openChomeWithUrl(String url) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(url);
	}

}


========================================================================================================

3rd way of writing Xpath : 

//tagName[text()='linkText']

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class WaysToWriteXpath {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		openChomeWithUrl("https://www.wikipedia.org/");
		thirdWayOfWritingXpath();
	}
	
	
	public static void thirdWayOfWritingXpath() {
		//tagName[text()='linkText']
		driver.findElement(By.xpath("//strong[text()='Deutsch']")).click();
	}
	
	public static void openChomeWithUrl(String url) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(url);
	}

}


==========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class WaysToWriteXpath {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		openChomeWithUrl("https://www.wikipedia.org/");
		thirdWayOfWritingXpath();
	}
	
	
	public static void thirdWayOfWritingXpath() {
		//tagName[text()='linkText']
		driver.findElement(By.xpath("//strong[text()='English']")).click();
	}
	
	public static void openChomeWithUrl(String url) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(url);
	}

}

========================================================================================================

4th way of writing Xpath : 

//tagName[contains(text(),'partialLinkText')]

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class WaysToWriteXpath {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		openChomeWithUrl("https://www.wikipedia.org/");
		fourthWayOfWritingXpath();
	}
	
	public static void fourthWayOfWritingXpath() {
		//tagName[contains(text(),'partialLinkText')]
		String linkTextOfElement = driver.findElement(By.xpath("//span[contains(text(),'Wikipedia in your')]")).getText();
		System.out.println("link text of my element is :: " + linkTextOfElement);
	}
		
	public static void openChomeWithUrl(String url) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(url);
	}

}


========================================================================================================

5th way of writing Xpath : 

syntax : 

(XPath)[index]

Note : we have learned in Java (in list, array etc) that indexing always starts from zero.
But Xpath is the only exception where indexing starts with one.

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class WaysToWriteXpath {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		openChomeWithUrl("https://www.flipkart.com/");
		fifthWayOfWritingXpath();
	}
	
	public static void fifthWayOfWritingXpath() {
//		(XPath)[index]
		String valueOfMyAttribute = driver.findElement(By.xpath("(.//div[@class='_1ch8e_'])[2]")).getAttribute("aria-label");
		System.out.println("value of my attribute is :: " + valueOfMyAttribute);
	}
	
	public static void openChomeWithUrl(String url) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(url);
	}

}


========================================================================================================


6th way of writing Xpath : 

syntax : 
//parentTag[@attributeName='attributeValue']//childTag[@attributeName='attributeValue']

parent child hierarcy : 

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class WaysToWriteXpath {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		openChomeWithUrl("https://www.wikipedia.org/");
		sixthWayOfWritingXpath();
	}
	
	public static void sixthWayOfWritingXpath() {
		//parentTag[@attributeName='attributeValue']//childTag[@attributeName='attributeValue']
		System.out.println("Hey I am waiting.......................................... ");
		waitForFixTime(4000);
		driver.findElement(By.xpath(".//button[@id='js-lang-list-button']//i[@class='sprite svg-arrow-down-blue']")).click();
	}
	
	public static void openChomeWithUrl(String url) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(url);
	}

	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
}


========================================================================================================


7th way of writing Xpath : 

syntax : 
//parentTag//childTag[@attributeName='attributeValue']

========================================================================================================

8th way of writing Xpath : 

syntax : 
//parentTag[@attributeName='attributeValue']//childTag

========================================================================================================


9th way of writing Xpath : 

syntax : 
use any of the xpath like (6th / 7th / 8th) with indexing


========================================================================================================

Assignment : 

Take any website and try with different webelement and write atleast one Xpath of each Type : 

1st way of writing Xpath : 

syntax : 

//tagName[@attributeName='attributeValue']

2nd way of writing Xpath : 

syntax : //tagName - to identify all the elements with that specific tag 

3rd way of writing Xpath : 

//tagName[text()='linkText']

4th way of writing Xpath : 

//tagName[contains(text(),'partialLinkText')]

5th way of writing Xpath : 

syntax : 

(XPath)[index]

6th way of writing Xpath : 

syntax : 
//parentTag[@attributeName='attributeValue']//childTag[@attributeName='attributeValue']

7th way of writing Xpath : 

syntax : 
//parentTag//childTag[@attributeName='attributeValue']

8th way of writing Xpath : 

syntax : 
//parentTag[@attributeName='attributeValue']//childTag

9th way of writing Xpath : 

syntax : 
use any of the xpath like (6th / 7th / 8th) with indexing

========================================================================================================

package SeleniumFromScratch;

public class HowToCheckWhetherMyXpathIsCorrect {

	public static void main(String[] args) {

	}
	
	// Way 1 : Try to execute it in your elements tab in developers tool
	
	// Way 2 : If your element is an input box, then try to write something in this element using sendKeys() method.
	// driver.findElement(By.xpath("")).sendKeys("Himanshu123");
	
	WebDriverManager.chromedriver().setup();
	WebDriver driver = new ChromeDriver();
	driver.get("https://www.guvi.in/sign-in/");
	driver.findElement(By.xpath(".//input[@id='email']")).sendKeys("Himanshu123");
	
	// Way 3 : If your element is a link, or a button, or checkBox, RadioButton etc, then use click() method
	
	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.get("https://www.guvi.in/sign-in/");
		driver.findElement(By.xpath(".//input[@id='email']")).sendKeys("Himanshutester01@gmail.com");
		driver.findElement(By.xpath(".//input[@id='password']")).sendKeys("Himanshu1234567890");
		driver.findElement(By.xpath(".//input[@id='logged-in']")).click();
	}
	
	// Way 4 : Take the Xpath of your element and try to fetch the value of any of its other attributeName.
	
	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.get("https://www.guvi.in/sign-in/");
		
		String typeAttributeValue = driver.findElement(By.xpath(".//input[@id='email']")).getAttribute("type");
		System.out.println("value of its type attribute is :: " + typeAttributeValue);
		
		String classAttributeValue = driver.findElement(By.xpath(".//input[@id='email']")).getAttribute("class");
		System.out.println("value of its class attribute is :: " + classAttributeValue);
		
	}
	
	

}

========================================================================================================

10th way of writing Xpath : 

syntax : 
Use following-sibling
.XpathOfAboveElement/following-sibling::tagNameOfFollowingSibling

.//div[@aria-label='Fashion']/following-sibling::div
.//div[@aria-label='Fashion']/following-sibling::a

10th Way with Indexing : 
(.//div[@aria-label='Fashion']/following-sibling::div)[1]

10th Way with Indexing : 
(.//div[@aria-label='Fashion']/following-sibling::a)[1]

========================================================================================================

11th way of writing Xpath : 

syntax : 
Use preceding-sibling
.XpathOfAboveElement/preceding-sibling::tagNameOfFollowingSibling

.//div[@aria-label='Electronics']/preceding-sibling::div

.//a[@aria-label='Flight Bookings']/preceding-sibling::a

(.//a[@aria-label='Flight Bookings']/preceding-sibling::a)[2]

========================================================================================================

12th way of writing the Xpath : 

GrandParentXpath/Parent/Child 

(.//div[@class='LX3sZb']/div/div)[1]

.//div[@class='LX3sZb']/div[@jsname='uZkjhb']/div[1]

========================================================================================================

13th way of writing the Xpath : (A very rare people know this type of XPath, this is my fav one) : 


//tagName[contains(@attributeName,'partialValueOfAttribute')]

.//textarea[contains(@title,'Sear')]

.//div[contains(@class,'UUbT9')]

.//div[contains(@class,'EyBRub')]

========================================================================================================

14th way of writing the Xpath (using starts-with) : 

//tagName[starts-with(@attributeName,'partialValueOfAttribute')]

.//div[starts-with(@aria-label,'Search by v')]

.//div[starts-with(@aria-label,'Search by i')]


========================================================================================================

15th way of writing the Xpath (using ends-with) : 

xPath 1.0 -> ends-with does not work
xPath 2.0 -> ends-with works

(.//input[ends-with(@aria-label,'Feeling Lucky')])[1]

========================================================================================================

16th way of writing the Xpath : 

//tagName[@attributeName='attributeValue' and @attributeName='attributeValue']

.//li[@role='presentation' and @id='d6ItKb']


17th way of writing the Xpath : 

//tagName[@attributeName='attributeValue' OR @attributeName='attributeValue']

.//li[@role='presentation' or @role='presentation23']

18th way of writing the Xpath :

childTag/parent::parentTag

.//div[@id='SIvCob']/a[contains(text(),'हिन्दी')]/parent::div



========================================================================================================

We are done with all the selenium locators : Id, Class, name, className, CssSelector, linkText, partialLinkText, tagName, Xpath - Absolute XPath and Relative Xpath : 


Deepika's Doubt Clarification : 

2nd way of writing Xpath : 

syntax : //tagName - to identify all the elements with that specific tag 

7th way of writing Xpath : 

syntax : 
//parentTag//childTag[@attributeName='attributeValue']

8th way of writing Xpath : 

syntax : 
//parentTag[@attributeName='attributeValue']//childTag

In second Xpath, If we need to identify how many elements are there on the page which are having "a" tag, then we can simply use //a
In second Xpath, If we need to identify how many elements are there on the page which are having "div" tag, then we can simply use //div
In second Xpath, If we need to identify how many elements are there on the page which are having "li" tag, then we can simply use //li
In second Xpath, If we need to identify how many elements are there on the page which are having "table" tag, then we can simply use //table
In second Xpath, If we need to identify how many elements are there on the page which are having "tr" tag, then we can simply use //tr
In second Xpath, If we need to identify how many elements are there on the page which are having "textarea" tag, then we can simply use //textarea
In second Xpath, If we need to identify how many elements are there on the page which are having "input" tag, then we can simply use //input

In 7th and 8th Xpath we can make any combinations to reach to the specific element : 

//parentTag//childTag[@attributeName=attributeValue]
//parentTag[@attributeName=attributeValue]//childTag[@attributeName=attributeValue]
//parentTag[@attributeName=attributeValue]//childTag


ParentXpath/ChildTag
ParentTag/ChildXpath
ParentXpath/ChildXpath

========================================================================================================

Write the xpath in a way that first write the Xpath for child element and then traverse to its parent and then traverse to its parent.

childXpath/parent::parentTag/parent::parentTag

========================================================================================================

Actions Class : 

Why Actions Class in selenium is used ?

Actions class in selenium is used to perform mouse actions like left click, right click, double click, mouse hover, drag and drop etc. etc.

I need to click on any element and I dont want to use click() method.

Create the object of Actions class, save it in a variable and use click method of actions class.

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import io.github.bonigarcia.wdm.WebDriverManager;

public class ActionsClassUsageInSelenium {

	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.flipkart.com/");
		WebElement myElement = driver.findElement(By.xpath(".//img[@alt='Mobiles']"));
		
		Actions action = new Actions(driver);
		action.click(myElement).perform();
		
		try {
			Thread.sleep(4000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		WebElement flipkartLogo = driver.findElement(By.xpath(".//img[@title='Flipkart']"));
	    action.click(flipkartLogo).perform();
	    
	    // Why we use perform method 
	    // It is mandatory to use perform method to perform any method of Actions class.
		
	}

}



========================================================================================================


Roopa's doubt : 

(//input[@id='input']/parent::div/parent::*[@id='inputWrapper']) it is not locating i dont know to do this

//textarea[@id='APjFqb']/parent::div/parent::div[@class='SDkEP']/parent::div/preceding-sibling::style/parent::div/ancestor::form/preceding-sibling::dialog/preceding-sibling::style/parent::div/style/parent::div/preceding-sibling::div[2]/style/following-sibling::a

========================================================================================================

How to mouse Hover on a webElement using Actions Class : 

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import io.github.bonigarcia.wdm.WebDriverManager;

public class MouseHoverUsingActionsClass {

	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.amazon.in/");
		WebElement freshElement = driver.findElement(By.xpath("//a[@id='nav-link-groceries']"));
		
		Actions action =  new Actions(driver);
		action.moveToElement(freshElement).perform();
		
		// wait for 5 seconds
		waitForFixTime(5000);
		
		WebElement primeElement = driver.findElement(By.xpath("//a[@id='nav-link-amazonprime']"));
		action.moveToElement(primeElement).perform();
		
		// wait for 2 seconds
		waitForFixTime(2000);
		WebElement joinPrimeButton = driver.findElement(By.id("multiasins-img-link"));
		action.click(joinPrimeButton).perform();
		
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}


========================================================================================================

How to drag and drop in Selenium using Actions class : 

we need sourceElement and targetElement :

sourceElement means which element we need to drag.
targetElement means where we need to put this element.

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import io.github.bonigarcia.wdm.WebDriverManager;

public class DragAndDropUnderstandingForBeginners {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		methodUsedToDragAndDrop();
	}
	
	public static void methodUsedToDragAndDrop() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demoqa.com/droppable/");
		
		WebElement mySourceElement = driver.findElement(By.id("draggable"));
		WebElement myTargetElement = driver.findElement(By.xpath("(.//*[@id='droppable'])[1]"));
		
		waitForFixTime(2000);
		
		Actions myAction =  new Actions(driver);
		myAction.dragAndDrop(mySourceElement, myTargetElement).perform();
		
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}


========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import io.github.bonigarcia.wdm.WebDriverManager;

public class DragAndDropUnderstandingForBeginners {

	public static WebDriver driver;
	
	public static void main(String[] args) {
		methodUsedToDragAndDrop();
	}
	
	public static void methodUsedToDragAndDrop() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://the-internet.herokuapp.com/drag_and_drop");
		
		WebElement mySourceElement = driver.findElement(By.id("column-a"));
		WebElement myTargetElement = driver.findElement(By.id("column-b"));
		
		waitForFixTime(2000);
		
		Actions myAction =  new Actions(driver);
		for(int count=0;count<10;count++) {
		myAction.dragAndDrop(mySourceElement, myTargetElement).perform();
		waitForFixTime(2000);
		}
		
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}


========================================================================================================


package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import io.github.bonigarcia.wdm.WebDriverManager;

public class DragAndDropRevision {
	
	public static WebDriver driver;

	public static void main(String[] args) {
		setUpChromeAndOpenUrl("https://www.globalsqa.com/demo-site/draganddrop/#Photo%20Manager");
		waitForSomeFixTime(500);
		switchToiFrame();
		waitForSomeFixTime(2000);
		WebElement mySourceElement1 = driver.findElement(By.xpath(".//h5[text()='High Tatras']/parent::li"));
		WebElement mySourceElement2 = driver.findElement(By.xpath(".//h5[text()='High Tatras 2']/parent::li"));
		WebElement mySourceElement3 = driver.findElement(By.xpath(".//h5[text()='High Tatras 3']/parent::li"));
		WebElement mySourceElement4 = driver.findElement(By.xpath(".//h5[text()='High Tatras 4']/parent::li"));
		WebElement myTargetElement = driver.findElement(By.id("trash"));
		methodToDoDragAndDrop(mySourceElement1, myTargetElement);
		methodToDoDragAndDrop(mySourceElement2, myTargetElement);
		methodToDoDragAndDrop(mySourceElement3, myTargetElement);
		methodToDoDragAndDrop(mySourceElement4, myTargetElement);
		
		waitForSomeFixTime(500);
		WebElement newTargetElement = driver.findElement(By.id("gallery"));
		methodToDoDragAndDrop(mySourceElement1, newTargetElement);
		methodToDoDragAndDrop(mySourceElement2, newTargetElement);
		methodToDoDragAndDrop(mySourceElement3, newTargetElement);
		methodToDoDragAndDrop(mySourceElement4, newTargetElement);
	}
	
	public static void setUpChromeAndOpenUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void methodToDoDragAndDrop(WebElement mySourceElement, WebElement myTargetElement) {
		Actions action = new Actions(driver);
		action.dragAndDrop(mySourceElement, myTargetElement).perform();
	}
	
	public static void switchToiFrame() {
		driver.switchTo().frame(driver.findElement(By.xpath(".//iframe[@class='demo-frame lazyloaded']")));
	}
	
	public static void waitForSomeFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}

}


========================================================================================================

How to do right click on any webelement in Actions class : 

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import io.github.bonigarcia.wdm.WebDriverManager;

public class RightClickInActionClass {

	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver  driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.google.com/");
		
		WebElement myElement  = driver.findElement(By.xpath(".//a[contains(text(),'Gmail')]"));
		
		Actions action = new Actions(driver);
		action.contextClick(myElement).perform();
		
	}

}


========================================================================================================

How to do right click in Actions class ?

What is contextClick on a webpage for any element : Context click means right click.

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import io.github.bonigarcia.wdm.WebDriverManager;

public class RightClickInActionClass {

	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver  driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.google.com/");
		
		WebElement myElement  = driver.findElement(By.xpath(".//a[contains(text(),'Image')]"));
		
		Actions action = new Actions(driver);
		action.contextClick(myElement).perform();
		
	}

}

========================================================================================================

Selectors Hub is an browser extension to check the Xpath of an element.
Seletors Hub is never used by any Tester.

========================================================================================================

How to use Keyboard keys when I am supposed to write Something in a text Box or any other element :

Keys. -> to use the keyboard keys.

Example : 

I need to write Himanshu in a text box : 

driver.findElement(By.xpath("")).sendKeys("Himanshu");

Alternate Way : 
driver.findElement(By.xpath("")).sendKeys("H");
driver.findElement(By.xpath("")).sendKeys("i");
driver.findElement(By.xpath("")).sendKeys("m");
driver.findElement(By.xpath("")).sendKeys("a");
driver.findElement(By.xpath("")).sendKeys("n");
driver.findElement(By.xpath("")).sendKeys("s");
driver.findElement(By.xpath("")).sendKeys("h");
driver.findElement(By.xpath("")).sendKeys("u");

Alternate Way : 
driver.findElement(By.xpath("")).sendKeys(Keys.SHIFT,"h");


package SeleniumFromScratch;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class UseKeyboardKeysInSelenium {

	public static void main(String[] args) {
		String searchText = "temperature in delhi and mumbai and bangalore";  
		// Interview Question : You need to write this search text in google searchBox but make sure to keep the first letter of every word in capital letters
		
		WebDriverManager.chromedriver().setup();
		WebDriver  driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.google.com/");
		
		WebElement searchBox = driver.findElement(By.id("APjFqb")); 
		
		String[] mySearchWords =  searchText.split(" ");
		for(int count=0;count<mySearchWords.length;count++) {
			searchBox.sendKeys(Keys.SHIFT + Character.toString(mySearchWords[count].charAt(0)));
			for(int index=1;index<mySearchWords[count].length();index++) {
				searchBox.sendKeys(Character.toString(mySearchWords[count].charAt(index)));
			}
			searchBox.sendKeys(" ");
		}
	}

}


========================================================================================================

How to handle checkbxes in selenium (use click method) : 


package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleCheckBoxInSelenium {

	static WebDriver driver;
	
	public static void main(String[] args) throws InterruptedException {
		
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.ironspider.ca/forms/checkradio.htm");
		WebElement redCheckBox = commonXpathForAllTheColorCheckBoxes("red");
		WebElement yellowCheckBox = commonXpathForAllTheColorCheckBoxes("yellow");
		WebElement blueCheckBox = commonXpathForAllTheColorCheckBoxes("blue");
		WebElement orangeCheckBox = commonXpathForAllTheColorCheckBoxes("orange");
		WebElement greenCheckBox = commonXpathForAllTheColorCheckBoxes("green");
		WebElement purpleCheckBox = commonXpathForAllTheColorCheckBoxes("purple");
		Thread.sleep(5000);
		for(int count=0;count<20;count++) {
		clickCheckBox(redCheckBox);
		clickCheckBox(yellowCheckBox);
		clickCheckBox(blueCheckBox);
		clickCheckBox(orangeCheckBox);
		clickCheckBox(greenCheckBox);
		clickCheckBox(purpleCheckBox);
		}
	}
	
	public static void clickCheckBox(WebElement myElement) {
		myElement.click();
	}
	
	public static WebElement commonXpathForAllTheColorCheckBoxes(String color) {
		return driver.findElement(By.xpath(".//input[@value='"+color+"']"));
	}

}

========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class CheckBoxesHandlingInSeleniumRevision {
	
	static WebDriver driver;

	public static void main(String[] args) {
		checkUncheckCheckBoxes();
	}
	
	public static void checkUncheckCheckBoxes() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://formstone.it/components/checkbox/");
		waitForFixTime(5000);
		commonXpathForCheckboxes(2).click();
		commonXpathForCheckboxes(4).click();
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static WebElement commonXpathForCheckboxes(int checkBoxNumber) {
		return driver.findElement(By.xpath(".//input[@id='checkbox-"+checkBoxNumber+"']/parent::div"));
	}
	
}


========================================================================================================

How to check whether the checkbox is already selected or not ?


It is never recommended to use isSelected() method, isEnabled() method and isDisplayed() method in selenium, because sometimes these methods work and sometimes does not.

getAttribute method.

========================================================================================================

How to handle radio button in selenium : 

It is same, we just need to use click method of selenium.

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class CheckBoxesHandlingInSeleniumRevision {

	static WebDriver driver;

	public static void main(String[] args) {
		checkUncheckCheckBoxes();
	}

	public static void checkUncheckCheckBoxes() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://formstone.it/components/checkbox/");
		waitForFixTime(5000);
		driver.findElement(By.xpath(".//label[@for='radio-2']/preceding-sibling::div")).click();
		if(!commonXpathForCheckboxes(1).isSelected()) {
			commonXpathForCheckboxes(1).click();
		}
		if(!commonXpathForCheckboxes(2).isSelected()) {
			commonXpathForCheckboxes(2).click();
		}
		if(!commonXpathForCheckboxes(4).isSelected()) {
			commonXpathForCheckboxes(4).click();
		}
	}

	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static WebElement commonXpathForCheckboxes(int checkBoxNumber) {
		return driver.findElement(By.xpath(".//input[@id='checkbox-"+checkBoxNumber+"']/parent::div"));
	}

}


========================================================================================================


- Take any website and select all the checkboxes one by one and then deselect all the checkboxes one by one.
- Take all the checkboxes in a way that we need to create a common Xpath for all the elements and we need to click on all checkboxes using this commonXpath Code.
- Take any website and select all the radio buttons of that page one by one. (Scroll on the page manually).

========================================================================================================

How to select/deselect all the checkboxes in one go (Using List) : 

package SeleniumFromScratch;

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class SelectAllTheCheckBoxesUsingList {

	static WebDriver driver;
	
	public static void main(String[] args) throws InterruptedException {
		selectAllCheckBoxesUsingList();
	}
	
	public static void selectAllCheckBoxesUsingList() throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.ironspider.ca/forms/checkradio.htm");
		List<WebElement> listOfMyCheckBoxes = driver.findElements(By.xpath(".//input[@type='checkbox']"));
	
		Thread.sleep(4000);
		int temp=0;
		while(temp<=1) {
		for(int index=0;index<listOfMyCheckBoxes.size();index++) {
			listOfMyCheckBoxes.get(index).click();
		}
		temp = temp +1;
		}
		
	}

}

========================================================================================================

How to handle Drop-down in selenium ?

There is a select class that is used in selenium to select any dropdown in a website.

But this select class is having passing percentage as only 10%, it means this select method fails for like 90% of the cases.
This select class only works when the html tag of that drop-down is "select".


There are 3 methods that we use in select class :
1) SelectByVisibleText()
2) SelectByValue()
3) SelectByIndex()

Code : 

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;
import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleDropDownUsingSelect {
	static WebDriver driver;
	public static void main(String[] args) {
		openUrl("https://www.globalsqa.com/demo-site/select-dropdown-menu/");
		selectByValue();
	}
	
	public static void selectByIndex() {
		WebElement myCountryDropDown = driver.findElement(By.xpath(".//option[contains(text(),'Afghanistan')]/parent::select"));
		Select select = new Select(myCountryDropDown);
		select.selectByIndex(2); // It should select the value that is there in the drop-down at index 3
	}
	
	public static void selectByVisibleText() {
		WebElement myCountryDropDown = driver.findElement(By.xpath(".//option[contains(text(),'Afghanistan')]/parent::select"));
		Select select = new Select(myCountryDropDown);
		select.selectByVisibleText("Australia"); // It should select the value that is there in the drop-down with text as Australia
	}
	
	public static void selectByValue() {
		WebElement myCountryDropDown = driver.findElement(By.xpath(".//option[contains(text(),'Afghanistan')]/parent::select"));
		Select select = new Select(myCountryDropDown);
		select.selectByValue("BTN"); // It should select the value that is there in the drop-down with value attribute as BTN
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}

}


========================================================================================================

How to select any drop-down value using List (Dont use select class) : 

package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleDropDownUsingList {

	static WebDriver driver;
	public static void main(String[] args) {
		openUrl("https://www.globalsqa.com/demo-site/select-dropdown-menu/");
		methodToHandleDropDownUsingList();
	}

	public static void methodToHandleDropDownUsingList() {
		WebElement myCountryDropDown = driver.findElement(By.xpath(".//option[contains(text(),'Afghanistan')]/parent::select"));
		myCountryDropDown.click();
		
		List<WebElement> myDropDownElements = driver.findElements(By.xpath(".//p//select//option"));
		for(int index=0; index<myDropDownElements.size();index++) {
			if(myDropDownElements.get(index).getText().equalsIgnoreCase("India")) {
				myDropDownElements.get(index).click();
				break;
			}
		}
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
}

========================================================================================================

package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleDropDownUsingList {

	static WebDriver driver;
	public static void main(String[] args) {
		openUrl("https://www.globalsqa.com/demo-site/select-dropdown-menu/");
		methodToHandleDropDownUsingList("Denmark");
	}

	public static void methodToHandleDropDownUsingList(String countryName) {
		WebElement myCountryDropDown = driver.findElement(By.xpath(".//option[contains(text(),'Afghanistan')]/parent::select"));
		myCountryDropDown.click();
		
		List<WebElement> myDropDownElements = driver.findElements(By.xpath(".//p//select//option"));
		for(int index=0; index<myDropDownElements.size();index++) {
			if(myDropDownElements.get(index).getText().equalsIgnoreCase(countryName)) {
				myDropDownElements.get(index).click();
				break;
			}
		}
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
}


========================================================================================================

package SeleniumFromScratch;

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleDropDownInSeleniumRevision {
	static WebDriver driver;
	
	public static void main(String[] args) {
			openUrl("https://practice.expandtesting.com/dropdown");
			selectPageCountFromExpandtestingPage("100");
	}
	
	public static void selectPageCountFromExpandtestingPage(String pageCountNumber) {
		wait(200);
		WebElement pageCountDropDown = driver.findElement(By.id("elementsPerPageSelect"));
		pageCountDropDown.click();
		wait(200);
		List<WebElement> numbersInDropdown = driver.findElements(By.xpath(".//select[@id='elementsPerPageSelect']/option"));
		for(int index=0;index<numbersInDropdown.size();index++) {
			if(numbersInDropdown.get(index).getText().equalsIgnoreCase(pageCountNumber)) {
				numbersInDropdown.get(index).click();
			}
		}
	}

	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void wait(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}
	
}



========================================================================================================

How to handle Calendar in selenium or How to handle Date Picker in Selenium : 

========================================================================================================

Assignment :

1) Take any website which is having drop-down to select and select any menu option using selectByValue() method.
2) Take any website which is having drop-down to select and select any menu option using selectByIndex() method.
3) Take any website which is having drop-down to select and select any menu option using selectByVisibleText() method.
4) Take any website which is having drop-down to select and select any menu option using driver.findElements (By creating the common Xpath for all the dropdown elements and then iterating on the list of webelements and select any drop-down option by its text).


package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

import io.github.bonigarcia.wdm.WebDriverManager;

public class DropDropAssignmentWithSelectByWithoutSelectBy {

	public static WebDriver driver;
	public static WebElement dropDownElement;
	
	public static void main(String[] args) {
		openUrl("https://automationtesting.co.uk/dropdown.html");
		selectOptionFromDropDownUsingFindElements("HONDA");
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
		dropDownElement = driver.findElement(By.xpath(".//select[@id='cars']"));
	}

	public static void selectCarsByValue(String valueThatWeNeedToSelect) {
		Select select = new Select(dropDownElement);
		select.selectByValue(valueThatWeNeedToSelect);
	}
	
	public static void selectCarsByIndex(int indexThatWeNeedToSelect) {
		Select select = new Select(dropDownElement);
		select.selectByIndex(indexThatWeNeedToSelect);
	}
	
	public static void selectCarsByVisibleText(String valueThatWeNeedToSelect) {
		Select select = new Select(dropDownElement);
		select.selectByVisibleText(valueThatWeNeedToSelect);
	}
	
	public static void selectOptionFromDropDownUsingFindElements(String optionName) {
		dropDownElement.click();
		List<WebElement> listOfCarsInDropDown = driver.findElements(By.xpath(".//select[@id='cars']/option"));
		for(int index=0;index<listOfCarsInDropDown.size();index++) {
			if(listOfCarsInDropDown.get(index).getText().equalsIgnoreCase(optionName)) {
				listOfCarsInDropDown.get(index).click();
			}
		}
	}
}


========================================================================================================

SetUp Chrome
Open URL where we have date-picket (Calendar)
Create the Xpath for DateDropDown and click it.
Create a Xpath in a way that both Month and Year should be there in that Xpath
Create the Xpath for navigation arrow and click on it till you reach your expected date and month
Create the Xpath for Date and click on it.


package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class DatePickerRevision {
	public static WebDriver driver;
	public static String month = "";
	public static String year = "";
	public static String date = "";

	public static void main(String[] args) throws InterruptedException {
		selectDateMonthYearFromDatePicker("4", "February", "2026");
	}
	
	public static void selectDateMonthYearFromDatePicker(String date, String month, String year) throws InterruptedException {
		openUrl("https://www.makemytrip.com/");
		Thread.sleep(2000);
		driver.findElement(By.xpath(".//label[@for='departure']/span")).click();
		// Lets Say Our Expected Month and Year are -> July 2026
		while(driver.findElements(By.xpath(".//div[@class='DayPicker-Caption']/div[text()='"+month+" "+year+"']")).size()==0) {
			Thread.sleep(1000);
			driver.findElement(By.xpath(".//span[@aria-label='Next Month']")).click();
		}
		driver.findElement(By.xpath(".//div[text()='"+month+" "+year+"']/parent::div/parent::div[@class='DayPicker-Month']//div[@class='dateInnerCell']//p[text()='"+date+"']")).click();
	}

	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
}


========================================================================================================

package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class DatePickerRevision {
	public static WebDriver driver;
	public static String month = "";
	public static String year = "";
	public static String date = "";

	public static void main(String[] args) throws InterruptedException {
		selectDateMonthYearFromDatePicker("4", "February", "2026");
	}
	
	public static void selectDateMonthYearFromDatePicker(String date, String month, String year) throws InterruptedException {
		openUrl("https://www.makemytrip.com/");
		Thread.sleep(2000);
		clickDateDropDown();
		openMonthAndYear(month, year);
		selectDate(month,year,date);
	}

	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void clickDateDropDown() {
		driver.findElement(By.xpath(".//label[@for='departure']/span")).click();
	}
	
	public static void openMonthAndYear(String month, String year) throws InterruptedException {
		while(driver.findElements(By.xpath(".//div[@class='DayPicker-Caption']/div[text()='"+month+" "+year+"']")).size()==0) {
			Thread.sleep(1000);
			driver.findElement(By.xpath(".//span[@aria-label='Next Month']")).click();
		}
	}
	
	public static void selectDate(String month, String year, String date) {
		driver.findElement(By.xpath(".//div[text()='"+month+" "+year+"']/parent::div/parent::div[@class='DayPicker-Month']//div[@class='dateInnerCell']//p[text()='"+date+"']")).click();
	}
	
}



========================================================================================================

Handling Frames, Handling Alerts and Handling Windows : 

Handling Frames : 

- Whenever there is an webelement which is in frame, you cant directly access it.

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class SwitchToIframe {
	public static WebDriver driver;
	
	public static void main(String[] args) throws InterruptedException {
		openUrl("https://www.globalsqa.com/demo-site/datepicker/");
		Thread.sleep(1000);
		// 1st way
//		switchToFrameByWebElement(driver.findElement(By.xpath(".//iframe[contains(@class,'demo-frame lazyloaded')]")));
		// 2nd way
//		switchToFrameByIndex(3);
		// 3rd way
		switchToFrameByIdorName("");
		Thread.sleep(1000);
		driver.findElement(By.id("datepicker")).click();
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void switchToFrameByWebElement(WebElement myElement) {
		driver.switchTo().frame(myElement);
	}
	
	public static void switchToFrameByIndex(int indexNumber) {
		driver.switchTo().frame(indexNumber);
	}
	
	public static void switchToFrameByIdorName(String nameOrId) {
		driver.switchTo().frame(nameOrId);
	}

}





package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class SwitchToIframe {
	public static WebDriver driver;
	
	public static void main(String[] args) throws InterruptedException {
		openUrl("https://www.globalsqa.com/demo-site/frames-and-windows/#iFrame");
		Thread.sleep(1000);
		// 1st way
//		switchToFrameByWebElement(driver.findElement(By.xpath(".//iframe[contains(@class,'demo-frame lazyloaded')]")));
		// 2nd way
//		switchToFrameByIndex(3);
		// 3rd way
		switchToFrameByIdorName("globalSqa");
		Thread.sleep(1000);
		driver.findElement(By.xpath("(.//div[@class='pic_holder']//img)[1]")).click();
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void switchToFrameByWebElement(WebElement myElement) {
		driver.switchTo().frame(myElement);
	}
	
	public static void switchToFrameByIndex(int indexNumber) {
		driver.switchTo().frame(indexNumber);
	}
	
	public static void switchToFrameByIdorName(String nameOrId) {
		driver.switchTo().frame(nameOrId);
	}

}



========================================================================================================

Assignment : 

1) Take any Website (where you can see the DatePicker) and Try to select 12-July-2024. (mandatory)
2) Take any Website (where you can see the DatePicker) and Try to select 12-July-2025. (mandatory)
3) Take any website where you have iframe and try to switch to the frame and then click on any element present in that frame (this question is optional).

========================================================================================================

iFrames Handling From Scratch : 

1) How to handle single iframe.
1.1) switchToFrameByIdorName
1.2) switchToFrameByIndex
1.3) switchToFrameByWebElement

2) How to handle multiple iframes (nested frames - frame inside a frame)

3) How to switch back to the parent window once you have switched to the frame.

========================================================================================================

1) How to handle single iframe.
1.1) switchToFrameByIdorName
1.2) switchToFrameByIndex
1.3) switchToFrameByWebElement


========================================================================================================
package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleFramesInSeleniumRevision {

	static WebDriver driver;
	
	public static void main(String[] args) {
		openUrl("https://www.globalsqa.com/demo-site/frames-and-windows/#iFrame");
		waitForFixTime(2000);
		switchToFrameUsingIdOrName("globalSqa");
		clickSeleniumOnlineTrainingImage();
	}
	
	public static void switchToFrameUsingIdOrName(String nameOrId) {
		driver.switchTo().frame(nameOrId);
	}
	
	public static void clickSeleniumOnlineTrainingImage() {
		driver.findElement(By.xpath("(.//div[@class='plus_overlay_icon']/following-sibling::img)[1]")).click();
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}

}

========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleFramesInSeleniumRevision {

	static WebDriver driver;
	
	public static void main(String[] args) {
		openUrl("https://www.globalsqa.com/demo-site/frames-and-windows/#iFrame");
		waitForFixTime(2000);
		switchToFrameByIndex(3);
		clickSeleniumOnlineTrainingImage();
	}
	
	public static void switchToFrameByIndex(int indexNumber) {
		driver.switchTo().frame(indexNumber);
	}
	
	public static void clickSeleniumOnlineTrainingImage() {
		driver.findElement(By.xpath("(.//div[@class='plus_overlay_icon']/following-sibling::img)[1]")).click();
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}

}

========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleFramesInSeleniumRevision {

	static WebDriver driver;
	
	public static void main(String[] args) {
		openUrl("https://www.globalsqa.com/demo-site/frames-and-windows/#iFrame");
		waitForFixTime(2000);
		switchToFrameByUsingXpath(driver.findElement(By.xpath(".//iframe[@name='globalSqa']")));
		clickSeleniumOnlineTrainingImage();
	}
	
	public static void switchToFrameByUsingXpath(WebElement myElement) {
		driver.switchTo().frame(myElement);
	}
	
	public static void clickSeleniumOnlineTrainingImage() {
		driver.findElement(By.xpath("(.//div[@class='plus_overlay_icon']/following-sibling::img)[1]")).click();
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}

}



========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleNestedFramesInSelenium {
	
	static WebDriver driver;
	
	public static void main(String[] args) {
		openUrl("https://www.dezlearn.com/nested-iframes-example/");
		driver.switchTo().frame("parent_iframe");
		driver.switchTo().frame("iframe1");
		clickOn2ndClickHereButton();
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void clickOn2ndClickHereButton() {
		driver.findElement(By.xpath(".//button[@id='u_5_6']")).click();
	}

}

========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleNestedFramesInSelenium {
	
	static WebDriver driver;
	
	public static void main(String[] args) {
		openUrl("https://www.dezlearn.com/nested-iframes-example/");
		driver.switchTo().frame("parent_iframe");
		driver.switchTo().frame("iframe1");
		clickOn2ndClickHereButton();
		driver.switchTo().defaultContent();
		clickOnCoursesLink();
	}
	
	public static void openUrl(String myUrl) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(myUrl);
	}
	
	public static void clickOn2ndClickHereButton() {
		driver.findElement(By.xpath(".//button[@id='u_5_6']")).click();
	}

	public static void clickOn1stClickHereButton() {
		driver.findElement(By.xpath(".//button[@id='u_5_5']")).click();
	}
	
	public static void clickOnCoursesLink() {
		driver.findElement(By.xpath(".//a[contains(text(),'Courses')]")).click();
	}
	
}

========================================================================================================

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class NestedFrameHandlingInSeleniumRevision {
	static WebDriver driver;
	
	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demoqa.com/nestedframes");
		driver.switchTo().frame(driver.findElement(By.xpath(".//iframe[@id='frame1']"))); // switch to parent frame
		driver.switchTo().frame(driver.findElement(By.xpath(".//iframe[@srcdoc='<p>Child Iframe</p>']"))); // switch to child frame
		String textWrittenInChildFrame = driver.findElement(By.xpath(".//body/p")).getText(); // access the element of child frame
		System.out.println("textWrittenInChildFrame is " + textWrittenInChildFrame);
	}

}

========================================================================================================

QUESTION :
If you have switch from html to frame1 and then from frame1 to frame2 and then from frame2 to frame3, now you need to access the element of 
frame1, how will you do it ??

Note : Frame2 is the child of frame1 and frame3 is the child of frame2.

========================================================================================================

Handle Alerts in Selenium : 

driver.switchTo().alert().accept();


package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleAlertsInSelenium {
	static WebDriver driver;
	
	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demoqa.com/alerts");
		waitForFixTime(4000);
		driver.findElement(By.xpath("(.//button[text()='Click me'])[3]")).click();
		driver.switchTo().alert().accept();
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}

}

========================================================================================================


driver.switchTo().alert().dismiss();

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleAlertsInSelenium {
	static WebDriver driver;
	
	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demoqa.com/alerts");
		waitForFixTime(4000);
		driver.findElement(By.xpath("(.//button[text()='Click me'])[3]")).click();
		driver.switchTo().alert().dismiss();
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}

}

========================================================================================================


package SeleniumFromScratch;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleAlertsInSelenium {
	static WebDriver driver;
	
	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demoqa.com/alerts");
		waitForFixTime(4000);
		driver.findElement(By.xpath("(.//button[text()='Click me'])[4]")).click();
		waitForFixTime(2000);
		Alert myAlert =  driver.switchTo().alert();
		myAlert.sendKeys("Himanshu");
		myAlert.accept();
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}

}

========================================================================================================

Handling Multiple Windows and Tabs in Selenium : 

How to Handle Multiple Windows (New Widnows) : 

getWindowHandle -> To get the ParentWindow -> return type is String
getWindowHandles -> To get all the windows (including parent also). -> return type is Set of String

========================================================================================================

- Handling Windows
- Handling Tabs
- Waits in Selenium
- How to scroll in Selenium 
- HTML Tables in Selenium 

========================================================================================================
========================================================================================================

Assignment : 

- Take any website where in you have frame, first switch to the frame and then click/use any element inside that frame.
- Take any website where you have nested frame, first of all switch to parent frame -> child frame -> switch directly to the main webpage and click on any element.
- Take any website and click on button where you will get the alert and select OK in the Alert pop-up.
- Take any website and click on button where you will get the alert and select Cancel in the Alert pop-up.

========================================================================================================
========================================================================================================

Roopa's Query : 

package SeleniumFromScratch;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;

public class AssignmentSolution {

	public static void main(String[] args) throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		ChromeDriver driver = new ChromeDriver();
		driver.get("https://www.globalsqa.com/demo-site/frames-and-windows/#iFrame");
		driver.manage().window().maximize();
		WebElement myElement=driver.findElement(By.xpath(".//iframe[@name='globalSqa']"));
		driver.switchTo().frame(myElement);
		driver.findElement(By.xpath("(.//div[@class='plus_overlay_icon']/following-sibling::img)[4]")).click();
        Thread.sleep(2000);
        driver.quit();
		
	}

}


========================================================================================================

Handling Windows in Selenium : 

getWindowHandle -> To get the ParentWindow -> return type is String
getWindowHandles -> To get all the windows (including parent also). -> return type is Set of String

package SeleniumFromScratch;

import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandleMultipleWindowsInSelenium {
	static WebDriver driver;
	
	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demoqa.com/browser-windows");
		waitForFixTime(2000);
		driver.findElement(By.id("windowButton")).click();
		String parentWindow = driver.getWindowHandle(); // Parent Window
		Set<String>allWindows = driver.getWindowHandles(); // All Windows Including Parent Window
		
		for(String window : allWindows) {
		if(!window.equals(parentWindow)) {
		driver.switchTo().window(window);
		String headingOnNewWindow = driver.findElement(By.xpath(".//h1")).getText();
		System.out.println("Heading on New Window is :: " + headingOnNewWindow);
		}
		}
	}
	
	public static void waitForFixTime(int time) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
		}
	}
}


========================================================================================================

Handling Tab In Selenium (Concept is exactly same as Handling Windows in Selenium) : 

package SeleniumFromScratch;

import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandlingTabsInSelnium {

	public static void main(String[] args) throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		ChromeDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demoqa.com/browser-windows");
		driver.findElement(By.xpath(".//button[@id='tabButton']")).click();
		Thread.sleep(2000);
		
		String mainWindow = driver.getWindowHandle();
		Set<String> allWindows = driver.getWindowHandles();
		for (String window : allWindows) {
			if(!window.equals(mainWindow)) {
				driver.switchTo().window(window);
				System.out.println("Title of the new page is :: " + driver.findElement(By.xpath(".//h1")).getText());
			}
		}
	}

}

========================================================================================================

- HTML Tables in Selenium :

package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandlingHTMLTableInSelenium {

	public static void main(String[] args) throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		ChromeDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demo.guru99.com/test/web-table-element.php");
		Thread.sleep(2000);
		List<WebElement> allCompanyNames =  driver.findElements(By.xpath(".//table[@class='dataTable']/tbody/tr/td[1]"));
		System.out.println("Total Company Names on the page are :: " + allCompanyNames.size());
	}

}


========================================================================================================

package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandlingHTMLTableInSelenium {

	public static void main(String[] args) throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		ChromeDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demo.guru99.com/test/web-table-element.php");
		Thread.sleep(2000);
		List<WebElement> allCompanyNames =  driver.findElements(By.xpath(".//table[@class='dataTable']/tbody/tr/td[1]"));
		System.out.println("Total Company Names on the page are :: " + allCompanyNames.size());
		for(int count=0;count<allCompanyNames.size();count++) {
			System.out.println("Company name is :: " + allCompanyNames.get(count).getText());
		}
	}

}


========================================================================================================

What is the current price of Company name as "IIFL Holdings" : 

package SeleniumFromScratch;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandlingHTMLTableInSelenium {

	public static void main(String[] args) throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		ChromeDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demo.guru99.com/test/web-table-element.php");
		Thread.sleep(2000);
		List<WebElement> allCompanyNames =  driver.findElements(By.xpath(".//table[@class='dataTable']/tbody/tr/td[1]"));
		List<WebElement> currentPricesOfCompanies = driver.findElements(By.xpath(".//table[@class='dataTable']/tbody/tr/td[4]"));
		
		for (int index=0;index<allCompanyNames.size();index++) {
			if(allCompanyNames.get(index).getText().equalsIgnoreCase("IIFL Holdings")) { 
				System.out.println("Current Price is :: " + currentPricesOfCompanies.get(index).getText());
			}
		}
		
	}

}


========================================================================================================

Enter values in HashMap : 

package SeleniumFromScratch;

import java.util.HashMap;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandlingHTMLTableInSelenium {

	public static void main(String[] args) throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		ChromeDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://demo.guru99.com/test/web-table-element.php");
		Thread.sleep(2000);
		List<WebElement> allCompanyNames =  driver.findElements(By.xpath(".//table[@class='dataTable']/tbody/tr/td[1]"));
		List<WebElement> currentPricesOfCompanies = driver.findElements(By.xpath(".//table[@class='dataTable']/tbody/tr/td[4]"));
		
		HashMap<WebElement, WebElement> myMap = new HashMap<WebElement, WebElement>();
		
		for (int index=0;index<allCompanyNames.size();index++) {
			myMap.put(allCompanyNames.get(index), currentPricesOfCompanies.get(index));
		}
	}
}

========================================================================================================

- How to scroll in Selenium

package SeleniumFromScratch;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class ScrollInSelenium {

	public static void main(String[] args) throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		ChromeDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.guvi.in/");
		Thread.sleep(2000);
		WebElement myElement = driver.findElement(By.xpath(".//span[contains(text(),'Live Classes + Placement Guidance')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView(true);", myElement);
		
	}

}

========================================================================================================

- POM and Page Factory 

========================================================================================================

Waits in Selenium : 

There are 3 waits that we have in Selenium : 
1) Implicit Wait
2) Explicit Wait
3) Fluent Wait

Wait in Java : 
Threa.sleep();

========================================================================================================

Implicit Wait : 

- Implicit wait works on the driver level.
- it means when we have implemented the implicit wait in the code then it will be applicable to all the webelements of that webpage.
What is implicit wait ?

If we are giving 30 seconds in implicit wait then it will wait for 30 seconds for the element to load.

package SeleniumFromScratch;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class ImplicitWaitInSelenium {

	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		driver.get("https://www.google.com");
		driver.findElement(By.xpath("abcd")).click();
	}

}

- Implicit wait in selenium is not recommended to use because once a time is given in implicit wait (say 30seconds), it will wait for 30 seconds for all the elements.
Lets say we want to wait for only 20 seconds for one element and 40 seconds for another element, which is not possible while we are using implicit wait.

- If the element is getting loaded in 10 seconds, then it will not wait for next 20 seconds (which is good). But the only problem is that we cant give different wait time for different elements.

========================================================================================================

Explicit Wait : 

- Explicit Wait works on WebElement Level.
- Explicit Wait that has been implemented on one element has no link with the wait time of another element.
- Because Explicit wait does not work on driver level.
- Explicit Wait has some many useful methods.


package SeleniumFromScratch;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import io.github.bonigarcia.wdm.WebDriverManager;

public class ExplicitWaitInSelenium {

	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.google.com");
		
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
		wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.xpath("abcd")));
		
		wait = new WebDriverWait(driver, Duration.ofSeconds(15));
		wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.id("googleMyPageABCDNew")));
		
	}

}


========================================================================================================

package SeleniumFromScratch;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import io.github.bonigarcia.wdm.WebDriverManager;

public class ExplicitWaitInSelenium {

	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.google.com");
		
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
		wait.until(ExpectedConditions.elementToBeClickable(By.linkText("Gmail"))).click();
		
	}

}



Explicit wait is always recommended to use.
After every 500ms (0.5 seconds) it checks for the element.


========================================================================================================

Fluent Wait : 
Pooling Frequency : it means it works like same as explicit wait but you can increase/decrease the frquency of checking the element.

Lets say you have same 30 seconds like you used in Explicit wait for an element.
In explicit wait, it will check after every 0.5 seconds whether the element is visible or not (till 30 seconds).

But in fluent wait, it will check after any customized seconds (seconds that we give in fluent wait) whether the element is visible or not. (till 30 seconds).

if pooling frequency is 10 seconds then after every 10 seconds it will check for the element visibility.

Fluent wait is very rarely used.

========================================================================================================

package SeleniumFromScratch;

import java.time.Duration;
import java.util.function.Function;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;

import io.github.bonigarcia.wdm.WebDriverManager;

public class FluentWaitInSelenium {

	public static void main(String[] args) {

		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.google.com");
		
		FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(Duration.ofSeconds(30)).pollingEvery(Duration.ofSeconds(4));
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("")));
		
	}

}

========================================================================================================

Thread.sleep in Java : 

- This is a forced wait in Java Script.
- When we use it, it does not matter what the condition is, this wait will surely be applied and it will wait for the exact time given in sleep method.
- It is never recommended to use.
- sometimes we use this for debugging purposes.

Thread.sleep(5000); // It means 5000ms which means 5 seconds.


========================================================================================================

Data Driven Testing
How to select single and multiple file.
AutoIT.
MySql
TestNG Framework.
Testing Reports like ExtentReport, HTML Report etc.
Jenkins (CI/CD Tool).
BDD Framework - Cucumber.

========================================================================================================

POM : Page Object Model is a automation framework.
It is very simple to understand.
It is very simple to read the code in POM.

We have page classes for all the pages of a webApplication.
We have test classes for all the pages of a webApplication.

Page classes are having locators to locate all the element of that page.
Test classes are used to call those locators and to write the business logic.

========================================================================================================

========================================================================================================

package pages;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class homePage {

	public static WebDriver driver;
	
	public homePage(WebDriver driver) {
		this.driver = driver;
	}
	
	public static WebElement searchBox() {
		return driver.findElement(By.xpath(".//div[@class='pwadesktop-srchbox']"));
	}
	
	public static WebElement searchButton() {
		return driver.findElement(By.xpath(".//button[text()='Search']"));
	}
	
	public static WebElement searchBoxOnPopUp() {
		return driver.findElement(By.id("searchInput"));
	}
	
	public static void clickAskAQueryLink() {
		driver.findElement(By.xpath(".//span[@class='askTxt']")).click();
	}

}



package pages;

import java.security.cert.X509Certificate;

import javax.xml.xpath.XPath;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class topMBACollegesInIndiaPage {

	public static WebDriver driver;
	
	public topMBACollegesInIndiaPage(WebDriver driver) {
		this.driver = driver;
	}
	
	public static WebElement searchLocation() {
		return driver.findElement(By.xpath(".//input[@placeholder='Search location']"));
	}
	
	public static WebElement cityCheckBox(String cityName) {
		return driver.findElement(By.xpath(".//label[@class='checkbox-label lead'][contains(text(),'"+cityName+"')]"));
	}
	
}



package tests;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;
import pages.homePage;

public class homePageTest {

	public static WebDriver driver;
	
	public static void main(String[] args) throws Exception {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		homePage hp = new homePage(driver);
		driver.get("https://www.shiksha.com/");
		driver.manage().window().maximize();
		Thread.sleep(2000);
		hp.clickAskAQueryLink();
	}

}



package tests;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;
import pages.topMBACollegesInIndiaPage;

public class topMBACollegesInIndiaPageTest {

	public static void main(String[] args) throws Exception{
		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		topMBACollegesInIndiaPage tp =  new topMBACollegesInIndiaPage(driver);
		driver.get("https://www.shiksha.com/mba/ranking/top-mba-colleges-in-india/2-2-0-0-0");
		tp.searchLocation().sendKeys("Bangalore");
		Thread.sleep(5000);
		tp.cityCheckBox("Bangalore").click();
	}

}


========================================================================================================

Page Factory : 

package pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class homePageWithPageFactory {
	WebDriver driver;

	public homePageWithPageFactory(WebDriver driver) {
		PageFactory.initElements(driver, this);
	}

	@FindBy(xpath=".//div[@class='pwadesktop-srchbox']") 
	WebElement searchBox;

	@FindBy(id="searchInput")
	WebElement searchInputOnPopUp;

	@FindBy(xpath = ".//button[@type='submit']")
	WebElement submitButton;
	
	public void searchOnShiksha() throws InterruptedException {
		searchBox.click();
		Thread.sleep(1000);
		searchInputOnPopUp.sendKeys("MBA Colleges");
		submitButton.click();
	}
}




package tests;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import io.github.bonigarcia.wdm.WebDriverManager;
import pages.homePageWithPageFactory;

public class homePageTestWithPageFactory {
	
	public static WebDriver driver;
	
	public static void main(String[] args) throws InterruptedException {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.get("https://www.shiksha.com");
		driver.manage().window().maximize();
		homePageWithPageFactory hp =  new homePageWithPageFactory(driver);
		 hp.searchOnShiksha();
	}
	

}


========================================================================================================
